
//----------------------------------------------------------------------------------
// <autogenerated>
//		This code was generated by a tool.
//		Changes to this file may cause incorrect behaviour and will be lost 
//		if the code is regenerated.
// </autogenerated>
//----------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections;
using System.ComponentModel;
using System.Globalization;
using Soneta.Types;
using Soneta.Business;
using Soneta.CRM;
using ProjectMZGM.Czynsze;

[assembly: ModuleType("Czynsze", typeof(ProjectMZGM.Czynsze.CzynszeModule), 4, "Czynsze", 3, VersionNumber=201)]

namespace ProjectMZGM.Czynsze {

	/// <summary>
	/// Moduł Czynsze.
	/// <seealso cref="Soneta.CRM"/>
	/// </summary>
	/// <seealso cref="Soneta.Business.Module"/>
	/// <seealso cref="Soneta.Business.Session"/>
	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public partial class CzynszeModule : Module {

		public static CzynszeModule GetInstance(ISessionable session) => (CzynszeModule)session?.Session?.Modules[moduleInfo];

		private static Soneta.Business.App.ModuleInfo moduleInfo = new Soneta.Business.App.ModuleInfo(session => new CzynszeModule(session)) {
		};

		CzynszeModule(Session session) : base(session) {}

		private CRMModule moduleCRM;

		[Browsable(false)]
		public CRMModule CRM => moduleCRM ?? (moduleCRM = CRMModule.GetInstance(Session));

		private static Soneta.Business.App.TableInfo tableInfoZarzadcy = new Soneta.Business.App.TableInfo.Create<Zarzadcy, Zarzadca, ZarzadcaRecord>("Zarzadca") {
		};

		public Zarzadcy Zarzadcy => (Zarzadcy)Session.Tables[tableInfoZarzadcy];

		private static Soneta.Business.App.KeyInfo keyInfoZarzadcaWgKod = new Soneta.Business.App.KeyInfo(tableInfoZarzadcy, table => new ZarzadcaTable.WgKodKey(table)) {
			Name = "WgKod",
			Unique = true,
			PrimaryKey = true,
			KeyFields = new[] {"KodZarzadcy"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Zarzadca.
		/// Dziedzicząca klasa <see cref="Zarzadcy"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Zarzadcy"/>
		/// <seealso cref="ZarzadcaRow"/>
		/// <seealso cref="Zarzadca"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela zarzadcow")]
		public abstract partial class ZarzadcaTable : GuidedTable {

			protected ZarzadcaTable() {}

			public class WgKodKey : Key<Zarzadca> {
				internal WgKodKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((ZarzadcaRecord)rec).KodZarzadcy.TrimEnd()
				};

				public Zarzadca this[string kodzarzadcy] => (Zarzadca)Find(kodzarzadcy);
			}

			public WgKodKey WgKod => (WgKodKey)Session.Keys[keyInfoZarzadcaWgKod];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="CzynszeModule"/>
			public new CzynszeModule Module => (CzynszeModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Zarzadca"/>
			public new Zarzadca this[int id] => (Zarzadca)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Zarzadca"/>
			public new Zarzadca[] this[int[] ids] => (Zarzadca[])base[ids];

			public new Zarzadca this[Guid guid] => (Zarzadca)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Zarzadca();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("KodZarzadcy");
				names.Append(divider); names.Append("Nieaktywny");
				names.Append(divider); names.Append("NazwaZarzadcy");
				names.Append(divider); names.Append("NumerTelefonu");
				names.Append(divider); names.Append("Ulica");
				names.Append(divider); names.Append("NumerDomu");
				names.Append(divider); names.Append("NumerLokalu");
				names.Append(divider); names.Append("KodPocztowyZarz");
				names.Append(divider); names.Append("MiastoZarz");
				names.Append(divider); names.Append("KontoKsiegowe");
				names.Append(divider); names.Append("KontoWoda4");
				names.Append(divider); names.Append("KontoWoda5");
				names.Append(divider); names.Append("KontoScieki4");
				names.Append(divider); names.Append("KontoScieki5");
				names.Append(divider); names.Append("KontoCO4");
				names.Append(divider); names.Append("KontoCO5");
				names.Append(divider); names.Append("KontoSmieci4");
				names.Append(divider); names.Append("KontoSmieci5");
				names.Append(divider); names.Append("KontoAntena4");
				names.Append(divider); names.Append("KontoAntena5");
				names.Append(divider); names.Append("KontoKekspl4");
				names.Append(divider); names.Append("KontoKekspl5");
				names.Append(divider); names.Append("KontoKosztyZarz4");
				names.Append(divider); names.Append("KontoKosztyZarz5");
				names.Append(divider); names.Append("KontoDomofon4");
				names.Append(divider); names.Append("KontoDomofon5");
				names.Append(divider); names.Append("KontoFunduszRem4");
				names.Append(divider); names.Append("KontoFunduszRem5");
				names.Append(divider); names.Append("KontoCWU4");
				names.Append(divider); names.Append("KontoCWU5");
				names.Append(divider); names.Append("KontoWinda4");
				names.Append(divider); names.Append("KontoWinda5");
				names.Append(divider); names.Append("KontoParagraf4260");
				names.Append(divider); names.Append("KontoParagraf4300");
				names.Append(divider); names.Append("KontoParagraf4270");
				names.Append(divider); names.Append("KontoParagraf4270FR");
				names.Append(divider); names.Append("KontoZarzadca3");
				names.Append(divider); names.Append("KontoZarzadca4");
			}

		}

		public abstract partial class ZarzadcaRow : GuidedRow {

			private ZarzadcaRecord record;

			protected override void AssignRecord(Record rec) {
				record = (ZarzadcaRecord)rec;
			}

			protected ZarzadcaRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[MaxLength(6)]
			[Required]
			public string KodZarzadcy {
				get {
					if (record==null) GetRecord();
					return record.KodZarzadcy;
				}
				set {
					ZarzadcaSchema.KodZarzadcyBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "KodZarzadcy");
					if (value.Length>KodZarzadcyLength) throw new ValueToLongException(this, "KodZarzadcy", KodZarzadcyLength);
					GetEdit(record==null, false);
					record.KodZarzadcy = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoZarzadcaWgKod);
					}
					ZarzadcaSchema.KodZarzadcyAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KodZarzadcyLength = 6;

			public bool Nieaktywny {
				get {
					if (record==null) GetRecord();
					return record.Nieaktywny;
				}
				set {
					ZarzadcaSchema.NieaktywnyBeforeEdit?.Invoke((Zarzadca)this, ref value);
					GetEdit(record==null, false);
					record.Nieaktywny = value;
					ZarzadcaSchema.NieaktywnyAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			[MaxLength(80)]
			[Required]
			public string NazwaZarzadcy {
				get {
					if (record==null) GetRecord();
					return record.NazwaZarzadcy;
				}
				set {
					ZarzadcaSchema.NazwaZarzadcyBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (string.IsNullOrEmpty(value)) throw new RequiredException(this, "NazwaZarzadcy");
					if (value.Length>NazwaZarzadcyLength) throw new ValueToLongException(this, "NazwaZarzadcy", NazwaZarzadcyLength);
					GetEdit(record==null, false);
					record.NazwaZarzadcy = value;
					ZarzadcaSchema.NazwaZarzadcyAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int NazwaZarzadcyLength = 80;

			[MaxLength(15)]
			public string NumerTelefonu {
				get {
					if (record==null) GetRecord();
					return record.NumerTelefonu;
				}
				set {
					ZarzadcaSchema.NumerTelefonuBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>NumerTelefonuLength) throw new ValueToLongException(this, "NumerTelefonu", NumerTelefonuLength);
					GetEdit(record==null, false);
					record.NumerTelefonu = value;
					ZarzadcaSchema.NumerTelefonuAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int NumerTelefonuLength = 15;

			[MaxLength(80)]
			public string Ulica {
				get {
					if (record==null) GetRecord();
					return record.Ulica;
				}
				set {
					ZarzadcaSchema.UlicaBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>UlicaLength) throw new ValueToLongException(this, "Ulica", UlicaLength);
					GetEdit(record==null, false);
					record.Ulica = value;
					ZarzadcaSchema.UlicaAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int UlicaLength = 80;

			[MaxLength(80)]
			public string NumerDomu {
				get {
					if (record==null) GetRecord();
					return record.NumerDomu;
				}
				set {
					ZarzadcaSchema.NumerDomuBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>NumerDomuLength) throw new ValueToLongException(this, "NumerDomu", NumerDomuLength);
					GetEdit(record==null, false);
					record.NumerDomu = value;
					ZarzadcaSchema.NumerDomuAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int NumerDomuLength = 80;

			[MaxLength(80)]
			public string NumerLokalu {
				get {
					if (record==null) GetRecord();
					return record.NumerLokalu;
				}
				set {
					ZarzadcaSchema.NumerLokaluBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>NumerLokaluLength) throw new ValueToLongException(this, "NumerLokalu", NumerLokaluLength);
					GetEdit(record==null, false);
					record.NumerLokalu = value;
					ZarzadcaSchema.NumerLokaluAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int NumerLokaluLength = 80;

			[MaxLength(6)]
			public string KodPocztowyZarz {
				get {
					if (record==null) GetRecord();
					return record.KodPocztowyZarz;
				}
				set {
					ZarzadcaSchema.KodPocztowyZarzBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KodPocztowyZarzLength) throw new ValueToLongException(this, "KodPocztowyZarz", KodPocztowyZarzLength);
					GetEdit(record==null, false);
					record.KodPocztowyZarz = value;
					ZarzadcaSchema.KodPocztowyZarzAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KodPocztowyZarzLength = 6;

			[MaxLength(50)]
			public string MiastoZarz {
				get {
					if (record==null) GetRecord();
					return record.MiastoZarz;
				}
				set {
					ZarzadcaSchema.MiastoZarzBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>MiastoZarzLength) throw new ValueToLongException(this, "MiastoZarz", MiastoZarzLength);
					GetEdit(record==null, false);
					record.MiastoZarz = value;
					ZarzadcaSchema.MiastoZarzAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int MiastoZarzLength = 50;

			[MaxLength(50)]
			public string KontoKsiegowe {
				get {
					if (record==null) GetRecord();
					return record.KontoKsiegowe;
				}
				set {
					ZarzadcaSchema.KontoKsiegoweBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoKsiegoweLength) throw new ValueToLongException(this, "KontoKsiegowe", KontoKsiegoweLength);
					GetEdit(record==null, false);
					record.KontoKsiegowe = value;
					ZarzadcaSchema.KontoKsiegoweAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoKsiegoweLength = 50;

			[MaxLength(50)]
			public string KontoWoda4 {
				get {
					if (record==null) GetRecord();
					return record.KontoWoda4;
				}
				set {
					ZarzadcaSchema.KontoWoda4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoWoda4Length) throw new ValueToLongException(this, "KontoWoda4", KontoWoda4Length);
					GetEdit(record==null, false);
					record.KontoWoda4 = value;
					ZarzadcaSchema.KontoWoda4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoWoda4Length = 50;

			[MaxLength(50)]
			public string KontoWoda5 {
				get {
					if (record==null) GetRecord();
					return record.KontoWoda5;
				}
				set {
					ZarzadcaSchema.KontoWoda5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoWoda5Length) throw new ValueToLongException(this, "KontoWoda5", KontoWoda5Length);
					GetEdit(record==null, false);
					record.KontoWoda5 = value;
					ZarzadcaSchema.KontoWoda5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoWoda5Length = 50;

			[MaxLength(50)]
			public string KontoScieki4 {
				get {
					if (record==null) GetRecord();
					return record.KontoScieki4;
				}
				set {
					ZarzadcaSchema.KontoScieki4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoScieki4Length) throw new ValueToLongException(this, "KontoScieki4", KontoScieki4Length);
					GetEdit(record==null, false);
					record.KontoScieki4 = value;
					ZarzadcaSchema.KontoScieki4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoScieki4Length = 50;

			[MaxLength(50)]
			public string KontoScieki5 {
				get {
					if (record==null) GetRecord();
					return record.KontoScieki5;
				}
				set {
					ZarzadcaSchema.KontoScieki5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoScieki5Length) throw new ValueToLongException(this, "KontoScieki5", KontoScieki5Length);
					GetEdit(record==null, false);
					record.KontoScieki5 = value;
					ZarzadcaSchema.KontoScieki5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoScieki5Length = 50;

			[MaxLength(50)]
			public string KontoCO4 {
				get {
					if (record==null) GetRecord();
					return record.KontoCO4;
				}
				set {
					ZarzadcaSchema.KontoCO4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoCO4Length) throw new ValueToLongException(this, "KontoCO4", KontoCO4Length);
					GetEdit(record==null, false);
					record.KontoCO4 = value;
					ZarzadcaSchema.KontoCO4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoCO4Length = 50;

			[MaxLength(50)]
			public string KontoCO5 {
				get {
					if (record==null) GetRecord();
					return record.KontoCO5;
				}
				set {
					ZarzadcaSchema.KontoCO5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoCO5Length) throw new ValueToLongException(this, "KontoCO5", KontoCO5Length);
					GetEdit(record==null, false);
					record.KontoCO5 = value;
					ZarzadcaSchema.KontoCO5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoCO5Length = 50;

			[MaxLength(50)]
			public string KontoSmieci4 {
				get {
					if (record==null) GetRecord();
					return record.KontoSmieci4;
				}
				set {
					ZarzadcaSchema.KontoSmieci4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoSmieci4Length) throw new ValueToLongException(this, "KontoSmieci4", KontoSmieci4Length);
					GetEdit(record==null, false);
					record.KontoSmieci4 = value;
					ZarzadcaSchema.KontoSmieci4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoSmieci4Length = 50;

			[MaxLength(50)]
			public string KontoSmieci5 {
				get {
					if (record==null) GetRecord();
					return record.KontoSmieci5;
				}
				set {
					ZarzadcaSchema.KontoSmieci5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoSmieci5Length) throw new ValueToLongException(this, "KontoSmieci5", KontoSmieci5Length);
					GetEdit(record==null, false);
					record.KontoSmieci5 = value;
					ZarzadcaSchema.KontoSmieci5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoSmieci5Length = 50;

			[MaxLength(50)]
			public string KontoAntena4 {
				get {
					if (record==null) GetRecord();
					return record.KontoAntena4;
				}
				set {
					ZarzadcaSchema.KontoAntena4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoAntena4Length) throw new ValueToLongException(this, "KontoAntena4", KontoAntena4Length);
					GetEdit(record==null, false);
					record.KontoAntena4 = value;
					ZarzadcaSchema.KontoAntena4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoAntena4Length = 50;

			[MaxLength(50)]
			public string KontoAntena5 {
				get {
					if (record==null) GetRecord();
					return record.KontoAntena5;
				}
				set {
					ZarzadcaSchema.KontoAntena5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoAntena5Length) throw new ValueToLongException(this, "KontoAntena5", KontoAntena5Length);
					GetEdit(record==null, false);
					record.KontoAntena5 = value;
					ZarzadcaSchema.KontoAntena5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoAntena5Length = 50;

			[MaxLength(50)]
			public string KontoKekspl4 {
				get {
					if (record==null) GetRecord();
					return record.KontoKekspl4;
				}
				set {
					ZarzadcaSchema.KontoKekspl4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoKekspl4Length) throw new ValueToLongException(this, "KontoKekspl4", KontoKekspl4Length);
					GetEdit(record==null, false);
					record.KontoKekspl4 = value;
					ZarzadcaSchema.KontoKekspl4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoKekspl4Length = 50;

			[MaxLength(50)]
			public string KontoKekspl5 {
				get {
					if (record==null) GetRecord();
					return record.KontoKekspl5;
				}
				set {
					ZarzadcaSchema.KontoKekspl5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoKekspl5Length) throw new ValueToLongException(this, "KontoKekspl5", KontoKekspl5Length);
					GetEdit(record==null, false);
					record.KontoKekspl5 = value;
					ZarzadcaSchema.KontoKekspl5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoKekspl5Length = 50;

			[MaxLength(50)]
			public string KontoKosztyZarz4 {
				get {
					if (record==null) GetRecord();
					return record.KontoKosztyZarz4;
				}
				set {
					ZarzadcaSchema.KontoKosztyZarz4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoKosztyZarz4Length) throw new ValueToLongException(this, "KontoKosztyZarz4", KontoKosztyZarz4Length);
					GetEdit(record==null, false);
					record.KontoKosztyZarz4 = value;
					ZarzadcaSchema.KontoKosztyZarz4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoKosztyZarz4Length = 50;

			[MaxLength(50)]
			public string KontoKosztyZarz5 {
				get {
					if (record==null) GetRecord();
					return record.KontoKosztyZarz5;
				}
				set {
					ZarzadcaSchema.KontoKosztyZarz5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoKosztyZarz5Length) throw new ValueToLongException(this, "KontoKosztyZarz5", KontoKosztyZarz5Length);
					GetEdit(record==null, false);
					record.KontoKosztyZarz5 = value;
					ZarzadcaSchema.KontoKosztyZarz5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoKosztyZarz5Length = 50;

			[MaxLength(50)]
			public string KontoDomofon4 {
				get {
					if (record==null) GetRecord();
					return record.KontoDomofon4;
				}
				set {
					ZarzadcaSchema.KontoDomofon4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoDomofon4Length) throw new ValueToLongException(this, "KontoDomofon4", KontoDomofon4Length);
					GetEdit(record==null, false);
					record.KontoDomofon4 = value;
					ZarzadcaSchema.KontoDomofon4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoDomofon4Length = 50;

			[MaxLength(50)]
			public string KontoDomofon5 {
				get {
					if (record==null) GetRecord();
					return record.KontoDomofon5;
				}
				set {
					ZarzadcaSchema.KontoDomofon5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoDomofon5Length) throw new ValueToLongException(this, "KontoDomofon5", KontoDomofon5Length);
					GetEdit(record==null, false);
					record.KontoDomofon5 = value;
					ZarzadcaSchema.KontoDomofon5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoDomofon5Length = 50;

			[MaxLength(50)]
			public string KontoFunduszRem4 {
				get {
					if (record==null) GetRecord();
					return record.KontoFunduszRem4;
				}
				set {
					ZarzadcaSchema.KontoFunduszRem4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoFunduszRem4Length) throw new ValueToLongException(this, "KontoFunduszRem4", KontoFunduszRem4Length);
					GetEdit(record==null, false);
					record.KontoFunduszRem4 = value;
					ZarzadcaSchema.KontoFunduszRem4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoFunduszRem4Length = 50;

			[MaxLength(50)]
			public string KontoFunduszRem5 {
				get {
					if (record==null) GetRecord();
					return record.KontoFunduszRem5;
				}
				set {
					ZarzadcaSchema.KontoFunduszRem5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoFunduszRem5Length) throw new ValueToLongException(this, "KontoFunduszRem5", KontoFunduszRem5Length);
					GetEdit(record==null, false);
					record.KontoFunduszRem5 = value;
					ZarzadcaSchema.KontoFunduszRem5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoFunduszRem5Length = 50;

			[MaxLength(50)]
			public string KontoCWU4 {
				get {
					if (record==null) GetRecord();
					return record.KontoCWU4;
				}
				set {
					ZarzadcaSchema.KontoCWU4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoCWU4Length) throw new ValueToLongException(this, "KontoCWU4", KontoCWU4Length);
					GetEdit(record==null, false);
					record.KontoCWU4 = value;
					ZarzadcaSchema.KontoCWU4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoCWU4Length = 50;

			[MaxLength(50)]
			public string KontoCWU5 {
				get {
					if (record==null) GetRecord();
					return record.KontoCWU5;
				}
				set {
					ZarzadcaSchema.KontoCWU5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoCWU5Length) throw new ValueToLongException(this, "KontoCWU5", KontoCWU5Length);
					GetEdit(record==null, false);
					record.KontoCWU5 = value;
					ZarzadcaSchema.KontoCWU5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoCWU5Length = 50;

			[MaxLength(50)]
			public string KontoWinda4 {
				get {
					if (record==null) GetRecord();
					return record.KontoWinda4;
				}
				set {
					ZarzadcaSchema.KontoWinda4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoWinda4Length) throw new ValueToLongException(this, "KontoWinda4", KontoWinda4Length);
					GetEdit(record==null, false);
					record.KontoWinda4 = value;
					ZarzadcaSchema.KontoWinda4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoWinda4Length = 50;

			[MaxLength(50)]
			public string KontoWinda5 {
				get {
					if (record==null) GetRecord();
					return record.KontoWinda5;
				}
				set {
					ZarzadcaSchema.KontoWinda5BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoWinda5Length) throw new ValueToLongException(this, "KontoWinda5", KontoWinda5Length);
					GetEdit(record==null, false);
					record.KontoWinda5 = value;
					ZarzadcaSchema.KontoWinda5AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoWinda5Length = 50;

			[MaxLength(50)]
			public string KontoParagraf4260 {
				get {
					if (record==null) GetRecord();
					return record.KontoParagraf4260;
				}
				set {
					ZarzadcaSchema.KontoParagraf4260BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoParagraf4260Length) throw new ValueToLongException(this, "KontoParagraf4260", KontoParagraf4260Length);
					GetEdit(record==null, false);
					record.KontoParagraf4260 = value;
					ZarzadcaSchema.KontoParagraf4260AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoParagraf4260Length = 50;

			[MaxLength(50)]
			public string KontoParagraf4300 {
				get {
					if (record==null) GetRecord();
					return record.KontoParagraf4300;
				}
				set {
					ZarzadcaSchema.KontoParagraf4300BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoParagraf4300Length) throw new ValueToLongException(this, "KontoParagraf4300", KontoParagraf4300Length);
					GetEdit(record==null, false);
					record.KontoParagraf4300 = value;
					ZarzadcaSchema.KontoParagraf4300AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoParagraf4300Length = 50;

			[MaxLength(50)]
			public string KontoParagraf4270 {
				get {
					if (record==null) GetRecord();
					return record.KontoParagraf4270;
				}
				set {
					ZarzadcaSchema.KontoParagraf4270BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoParagraf4270Length) throw new ValueToLongException(this, "KontoParagraf4270", KontoParagraf4270Length);
					GetEdit(record==null, false);
					record.KontoParagraf4270 = value;
					ZarzadcaSchema.KontoParagraf4270AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoParagraf4270Length = 50;

			[MaxLength(50)]
			public string KontoParagraf4270FR {
				get {
					if (record==null) GetRecord();
					return record.KontoParagraf4270FR;
				}
				set {
					ZarzadcaSchema.KontoParagraf4270FRBeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoParagraf4270FRLength) throw new ValueToLongException(this, "KontoParagraf4270FR", KontoParagraf4270FRLength);
					GetEdit(record==null, false);
					record.KontoParagraf4270FR = value;
					ZarzadcaSchema.KontoParagraf4270FRAfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoParagraf4270FRLength = 50;

			[MaxLength(50)]
			public string KontoZarzadca3 {
				get {
					if (record==null) GetRecord();
					return record.KontoZarzadca3;
				}
				set {
					ZarzadcaSchema.KontoZarzadca3BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoZarzadca3Length) throw new ValueToLongException(this, "KontoZarzadca3", KontoZarzadca3Length);
					GetEdit(record==null, false);
					record.KontoZarzadca3 = value;
					ZarzadcaSchema.KontoZarzadca3AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoZarzadca3Length = 50;

			[MaxLength(50)]
			public string KontoZarzadca4 {
				get {
					if (record==null) GetRecord();
					return record.KontoZarzadca4;
				}
				set {
					ZarzadcaSchema.KontoZarzadca4BeforeEdit?.Invoke((Zarzadca)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoZarzadca4Length) throw new ValueToLongException(this, "KontoZarzadca4", KontoZarzadca4Length);
					GetEdit(record==null, false);
					record.KontoZarzadca4 = value;
					ZarzadcaSchema.KontoZarzadca4AfterEdit?.Invoke((Zarzadca)this);
				}
			}

			public const int KontoZarzadca4Length = 50;

			[Browsable(false)]
			public new Zarzadcy Table => (Zarzadcy)base.Table;

			[Browsable(false)]
			public CzynszeModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoZarzadcy;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				ZarzadcaSchema.OnCalcObjectRight?.Invoke((Zarzadca)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				ZarzadcaSchema.OnCalcParentsObjectRight?.Invoke((Zarzadca)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				ZarzadcaSchema.OnCalcReadOnly?.Invoke((Zarzadca)this, ref result);
				return result;
			}

			class KodZarzadcyRequiredVerifier : RequiredVerifier {
				internal KodZarzadcyRequiredVerifier(IRow row) : base(row, "KodZarzadcy") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((ZarzadcaRow)Row).KodZarzadcy));
			}

			class NazwaZarzadcyRequiredVerifier : RequiredVerifier {
				internal NazwaZarzadcyRequiredVerifier(IRow row) : base(row, "NazwaZarzadcy") {
				}
				protected override bool IsValid() => !(string.IsNullOrEmpty(((ZarzadcaRow)Row).NazwaZarzadcy));
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new KodZarzadcyRequiredVerifier(this));
				Session.Verifiers.Add(new NazwaZarzadcyRequiredVerifier(this));
				ZarzadcaSchema.OnAdded?.Invoke((Zarzadca)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				ZarzadcaSchema.OnLoaded?.Invoke((Zarzadca)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				ZarzadcaSchema.OnEditing?.Invoke((Zarzadca)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				ZarzadcaSchema.OnDeleting?.Invoke((Zarzadca)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				ZarzadcaSchema.OnDeleted?.Invoke((Zarzadca)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				ZarzadcaSchema.OnRepacked?.Invoke((Zarzadca)this);
			}

		}

		public sealed class ZarzadcaRecord : GuidedRecord {
			[Required]
			[MaxLength(6)]
			public string KodZarzadcy = "";
			public bool Nieaktywny;
			[Required]
			[MaxLength(80)]
			public string NazwaZarzadcy = "";
			[MaxLength(15)]
			public string NumerTelefonu = "";
			[MaxLength(80)]
			public string Ulica = "";
			[MaxLength(80)]
			public string NumerDomu = "";
			[MaxLength(80)]
			public string NumerLokalu = "";
			[MaxLength(6)]
			public string KodPocztowyZarz = "";
			[MaxLength(50)]
			public string MiastoZarz = "";
			[MaxLength(50)]
			public string KontoKsiegowe = "";
			[MaxLength(50)]
			public string KontoWoda4 = "";
			[MaxLength(50)]
			public string KontoWoda5 = "";
			[MaxLength(50)]
			public string KontoScieki4 = "";
			[MaxLength(50)]
			public string KontoScieki5 = "";
			[MaxLength(50)]
			public string KontoCO4 = "";
			[MaxLength(50)]
			public string KontoCO5 = "";
			[MaxLength(50)]
			public string KontoSmieci4 = "";
			[MaxLength(50)]
			public string KontoSmieci5 = "";
			[MaxLength(50)]
			public string KontoAntena4 = "";
			[MaxLength(50)]
			public string KontoAntena5 = "";
			[MaxLength(50)]
			public string KontoKekspl4 = "";
			[MaxLength(50)]
			public string KontoKekspl5 = "";
			[MaxLength(50)]
			public string KontoKosztyZarz4 = "";
			[MaxLength(50)]
			public string KontoKosztyZarz5 = "";
			[MaxLength(50)]
			public string KontoDomofon4 = "";
			[MaxLength(50)]
			public string KontoDomofon5 = "";
			[MaxLength(50)]
			public string KontoFunduszRem4 = "";
			[MaxLength(50)]
			public string KontoFunduszRem5 = "";
			[MaxLength(50)]
			public string KontoCWU4 = "";
			[MaxLength(50)]
			public string KontoCWU5 = "";
			[MaxLength(50)]
			public string KontoWinda4 = "";
			[MaxLength(50)]
			public string KontoWinda5 = "";
			[MaxLength(50)]
			public string KontoParagraf4260 = "";
			[MaxLength(50)]
			public string KontoParagraf4300 = "";
			[MaxLength(50)]
			public string KontoParagraf4270 = "";
			[MaxLength(50)]
			public string KontoParagraf4270FR = "";
			[MaxLength(50)]
			public string KontoZarzadca3 = "";
			[MaxLength(50)]
			public string KontoZarzadca4 = "";

			public override Record Clone() {
				ZarzadcaRecord rec = (ZarzadcaRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				KodZarzadcy = creator.Read_string();
				Nieaktywny = creator.Read_boolean();
				NazwaZarzadcy = creator.Read_string();
				NumerTelefonu = creator.Read_string();
				Ulica = creator.Read_string();
				NumerDomu = creator.Read_string();
				NumerLokalu = creator.Read_string();
				KodPocztowyZarz = creator.Read_string();
				MiastoZarz = creator.Read_string();
				KontoKsiegowe = creator.Read_string();
				KontoWoda4 = creator.Read_string();
				KontoWoda5 = creator.Read_string();
				KontoScieki4 = creator.Read_string();
				KontoScieki5 = creator.Read_string();
				KontoCO4 = creator.Read_string();
				KontoCO5 = creator.Read_string();
				KontoSmieci4 = creator.Read_string();
				KontoSmieci5 = creator.Read_string();
				KontoAntena4 = creator.Read_string();
				KontoAntena5 = creator.Read_string();
				KontoKekspl4 = creator.Read_string();
				KontoKekspl5 = creator.Read_string();
				KontoKosztyZarz4 = creator.Read_string();
				KontoKosztyZarz5 = creator.Read_string();
				KontoDomofon4 = creator.Read_string();
				KontoDomofon5 = creator.Read_string();
				KontoFunduszRem4 = creator.Read_string();
				KontoFunduszRem5 = creator.Read_string();
				KontoCWU4 = creator.Read_string();
				KontoCWU5 = creator.Read_string();
				KontoWinda4 = creator.Read_string();
				KontoWinda5 = creator.Read_string();
				KontoParagraf4260 = creator.Read_string();
				KontoParagraf4300 = creator.Read_string();
				KontoParagraf4270 = creator.Read_string();
				KontoParagraf4270FR = creator.Read_string();
				KontoZarzadca3 = creator.Read_string();
				KontoZarzadca4 = creator.Read_string();
			}
		}

		public static class ZarzadcaSchema {

			internal static RowDelegate<ZarzadcaRow, string> KodZarzadcyBeforeEdit;
			public static void AddKodZarzadcyBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KodZarzadcyBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KodZarzadcyBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KodZarzadcyAfterEdit;
			public static void AddKodZarzadcyAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KodZarzadcyAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KodZarzadcyAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, bool> NieaktywnyBeforeEdit;
			public static void AddNieaktywnyBeforeEdit(RowDelegate<ZarzadcaRow, bool> value)
				=> NieaktywnyBeforeEdit = (RowDelegate<ZarzadcaRow, bool>)Delegate.Combine(NieaktywnyBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> NieaktywnyAfterEdit;
			public static void AddNieaktywnyAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> NieaktywnyAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(NieaktywnyAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> NazwaZarzadcyBeforeEdit;
			public static void AddNazwaZarzadcyBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> NazwaZarzadcyBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(NazwaZarzadcyBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> NazwaZarzadcyAfterEdit;
			public static void AddNazwaZarzadcyAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> NazwaZarzadcyAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(NazwaZarzadcyAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> NumerTelefonuBeforeEdit;
			public static void AddNumerTelefonuBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> NumerTelefonuBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(NumerTelefonuBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> NumerTelefonuAfterEdit;
			public static void AddNumerTelefonuAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> NumerTelefonuAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(NumerTelefonuAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> UlicaBeforeEdit;
			public static void AddUlicaBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> UlicaBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(UlicaBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> UlicaAfterEdit;
			public static void AddUlicaAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> UlicaAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(UlicaAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> NumerDomuBeforeEdit;
			public static void AddNumerDomuBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> NumerDomuBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(NumerDomuBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> NumerDomuAfterEdit;
			public static void AddNumerDomuAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> NumerDomuAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(NumerDomuAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> NumerLokaluBeforeEdit;
			public static void AddNumerLokaluBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> NumerLokaluBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(NumerLokaluBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> NumerLokaluAfterEdit;
			public static void AddNumerLokaluAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> NumerLokaluAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(NumerLokaluAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KodPocztowyZarzBeforeEdit;
			public static void AddKodPocztowyZarzBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KodPocztowyZarzBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KodPocztowyZarzBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KodPocztowyZarzAfterEdit;
			public static void AddKodPocztowyZarzAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KodPocztowyZarzAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KodPocztowyZarzAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> MiastoZarzBeforeEdit;
			public static void AddMiastoZarzBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> MiastoZarzBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(MiastoZarzBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> MiastoZarzAfterEdit;
			public static void AddMiastoZarzAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> MiastoZarzAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(MiastoZarzAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoKsiegoweBeforeEdit;
			public static void AddKontoKsiegoweBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoKsiegoweBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoKsiegoweBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoKsiegoweAfterEdit;
			public static void AddKontoKsiegoweAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoKsiegoweAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoKsiegoweAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoWoda4BeforeEdit;
			public static void AddKontoWoda4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoWoda4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoWoda4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoWoda4AfterEdit;
			public static void AddKontoWoda4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoWoda4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoWoda4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoWoda5BeforeEdit;
			public static void AddKontoWoda5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoWoda5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoWoda5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoWoda5AfterEdit;
			public static void AddKontoWoda5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoWoda5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoWoda5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoScieki4BeforeEdit;
			public static void AddKontoScieki4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoScieki4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoScieki4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoScieki4AfterEdit;
			public static void AddKontoScieki4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoScieki4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoScieki4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoScieki5BeforeEdit;
			public static void AddKontoScieki5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoScieki5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoScieki5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoScieki5AfterEdit;
			public static void AddKontoScieki5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoScieki5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoScieki5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoCO4BeforeEdit;
			public static void AddKontoCO4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoCO4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoCO4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoCO4AfterEdit;
			public static void AddKontoCO4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoCO4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoCO4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoCO5BeforeEdit;
			public static void AddKontoCO5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoCO5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoCO5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoCO5AfterEdit;
			public static void AddKontoCO5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoCO5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoCO5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoSmieci4BeforeEdit;
			public static void AddKontoSmieci4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoSmieci4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoSmieci4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoSmieci4AfterEdit;
			public static void AddKontoSmieci4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoSmieci4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoSmieci4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoSmieci5BeforeEdit;
			public static void AddKontoSmieci5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoSmieci5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoSmieci5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoSmieci5AfterEdit;
			public static void AddKontoSmieci5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoSmieci5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoSmieci5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoAntena4BeforeEdit;
			public static void AddKontoAntena4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoAntena4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoAntena4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoAntena4AfterEdit;
			public static void AddKontoAntena4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoAntena4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoAntena4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoAntena5BeforeEdit;
			public static void AddKontoAntena5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoAntena5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoAntena5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoAntena5AfterEdit;
			public static void AddKontoAntena5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoAntena5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoAntena5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoKekspl4BeforeEdit;
			public static void AddKontoKekspl4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoKekspl4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoKekspl4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoKekspl4AfterEdit;
			public static void AddKontoKekspl4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoKekspl4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoKekspl4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoKekspl5BeforeEdit;
			public static void AddKontoKekspl5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoKekspl5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoKekspl5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoKekspl5AfterEdit;
			public static void AddKontoKekspl5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoKekspl5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoKekspl5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoKosztyZarz4BeforeEdit;
			public static void AddKontoKosztyZarz4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoKosztyZarz4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoKosztyZarz4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoKosztyZarz4AfterEdit;
			public static void AddKontoKosztyZarz4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoKosztyZarz4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoKosztyZarz4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoKosztyZarz5BeforeEdit;
			public static void AddKontoKosztyZarz5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoKosztyZarz5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoKosztyZarz5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoKosztyZarz5AfterEdit;
			public static void AddKontoKosztyZarz5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoKosztyZarz5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoKosztyZarz5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoDomofon4BeforeEdit;
			public static void AddKontoDomofon4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoDomofon4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoDomofon4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoDomofon4AfterEdit;
			public static void AddKontoDomofon4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoDomofon4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoDomofon4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoDomofon5BeforeEdit;
			public static void AddKontoDomofon5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoDomofon5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoDomofon5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoDomofon5AfterEdit;
			public static void AddKontoDomofon5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoDomofon5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoDomofon5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoFunduszRem4BeforeEdit;
			public static void AddKontoFunduszRem4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoFunduszRem4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoFunduszRem4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoFunduszRem4AfterEdit;
			public static void AddKontoFunduszRem4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoFunduszRem4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoFunduszRem4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoFunduszRem5BeforeEdit;
			public static void AddKontoFunduszRem5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoFunduszRem5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoFunduszRem5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoFunduszRem5AfterEdit;
			public static void AddKontoFunduszRem5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoFunduszRem5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoFunduszRem5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoCWU4BeforeEdit;
			public static void AddKontoCWU4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoCWU4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoCWU4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoCWU4AfterEdit;
			public static void AddKontoCWU4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoCWU4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoCWU4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoCWU5BeforeEdit;
			public static void AddKontoCWU5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoCWU5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoCWU5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoCWU5AfterEdit;
			public static void AddKontoCWU5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoCWU5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoCWU5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoWinda4BeforeEdit;
			public static void AddKontoWinda4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoWinda4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoWinda4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoWinda4AfterEdit;
			public static void AddKontoWinda4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoWinda4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoWinda4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoWinda5BeforeEdit;
			public static void AddKontoWinda5BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoWinda5BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoWinda5BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoWinda5AfterEdit;
			public static void AddKontoWinda5AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoWinda5AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoWinda5AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoParagraf4260BeforeEdit;
			public static void AddKontoParagraf4260BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoParagraf4260BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoParagraf4260BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoParagraf4260AfterEdit;
			public static void AddKontoParagraf4260AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoParagraf4260AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoParagraf4260AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoParagraf4300BeforeEdit;
			public static void AddKontoParagraf4300BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoParagraf4300BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoParagraf4300BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoParagraf4300AfterEdit;
			public static void AddKontoParagraf4300AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoParagraf4300AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoParagraf4300AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoParagraf4270BeforeEdit;
			public static void AddKontoParagraf4270BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoParagraf4270BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoParagraf4270BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoParagraf4270AfterEdit;
			public static void AddKontoParagraf4270AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoParagraf4270AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoParagraf4270AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoParagraf4270FRBeforeEdit;
			public static void AddKontoParagraf4270FRBeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoParagraf4270FRBeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoParagraf4270FRBeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoParagraf4270FRAfterEdit;
			public static void AddKontoParagraf4270FRAfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoParagraf4270FRAfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoParagraf4270FRAfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoZarzadca3BeforeEdit;
			public static void AddKontoZarzadca3BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoZarzadca3BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoZarzadca3BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoZarzadca3AfterEdit;
			public static void AddKontoZarzadca3AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoZarzadca3AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoZarzadca3AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow, string> KontoZarzadca4BeforeEdit;
			public static void AddKontoZarzadca4BeforeEdit(RowDelegate<ZarzadcaRow, string> value)
				=> KontoZarzadca4BeforeEdit = (RowDelegate<ZarzadcaRow, string>)Delegate.Combine(KontoZarzadca4BeforeEdit, value);

			internal static RowDelegate<ZarzadcaRow> KontoZarzadca4AfterEdit;
			public static void AddKontoZarzadca4AfterEdit(RowDelegate<ZarzadcaRow> value)
				=> KontoZarzadca4AfterEdit = (RowDelegate<ZarzadcaRow>)Delegate.Combine(KontoZarzadca4AfterEdit, value);

			internal static RowDelegate<ZarzadcaRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<ZarzadcaRow> value)
				=> OnLoaded = (RowDelegate<ZarzadcaRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<ZarzadcaRow> OnAdded;
			public static void AddOnAdded(RowDelegate<ZarzadcaRow> value)
				=> OnAdded = (RowDelegate<ZarzadcaRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<ZarzadcaRow> OnEditing;
			public static void AddOnEditing(RowDelegate<ZarzadcaRow> value)
				=> OnEditing = (RowDelegate<ZarzadcaRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<ZarzadcaRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<ZarzadcaRow> value)
				=> OnDeleting = (RowDelegate<ZarzadcaRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<ZarzadcaRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<ZarzadcaRow> value)
				=> OnDeleted = (RowDelegate<ZarzadcaRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<ZarzadcaRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<ZarzadcaRow> value)
				=> OnRepacked = (RowDelegate<ZarzadcaRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<ZarzadcaRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<ZarzadcaRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<ZarzadcaRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<ZarzadcaRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<ZarzadcaRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<ZarzadcaRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<ZarzadcaRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<ZarzadcaRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<ZarzadcaRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.TableInfo tableInfoRozliczenia = new Soneta.Business.App.TableInfo.Create<Rozliczenia, Rozliczenie, RozliczenieRecord>("Rozlicze") {
		};

		public Rozliczenia Rozliczenia => (Rozliczenia)Session.Tables[tableInfoRozliczenia];

		private static Soneta.Business.App.KeyInfo keyInfoRozliczenieNieruchomosc_wsk = new Soneta.Business.App.KeyInfo(tableInfoRozliczenia, table => new RozliczenieTable.Nieruchomosc_wskRelation(table)) {
			Name = "Rozliczenie_Nieruchomosc",
			RelationTo = "Nieruchomosc",
			KeyFields = new[] {"Nieruchomosc_wsk", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoRozliczenieZarzadca = new Soneta.Business.App.KeyInfo(tableInfoRozliczenia, table => new RozliczenieTable.ZarzadcaRelation(table)) {
			Name = "Rozliczenie_Zarzadca",
			RelationTo = "Zarzadca",
			KeyFields = new[] {"Zarzadca", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoRozliczenieWgAdresuNieruchomosci = new Soneta.Business.App.KeyInfo(tableInfoRozliczenia, table => new RozliczenieTable.WgAdresuNieruchomosciKey(table)) {
			Name = "WgAdresuNieruchomosci",
			PrimaryKey = true,
			KeyFields = new[] {"AdresPelnyNieruchomosci", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Rozliczenie.
		/// Dziedzicząca klasa <see cref="Rozliczenia"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Rozliczenia"/>
		/// <seealso cref="RozliczenieRow"/>
		/// <seealso cref="Rozliczenie"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela rozliczen")]
		public abstract partial class RozliczenieTable : GuidedTable {

			protected RozliczenieTable() {}

			public class Nieruchomosc_wskRelation : Key<Rozliczenie> {
				internal Nieruchomosc_wskRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((RozliczenieRecord)rec).Nieruchomosc_wsk,
					row.ID
				};

				public SubTable<Rozliczenie> this[Nieruchomosc nieruchomosc_wsk] => new SubTable<Rozliczenie>(this, nieruchomosc_wsk);
			}

			public Nieruchomosc_wskRelation WgNieruchomosc_wsk => (Nieruchomosc_wskRelation)Session.Keys[keyInfoRozliczenieNieruchomosc_wsk];

			public class ZarzadcaRelation : Key<Rozliczenie> {
				internal ZarzadcaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((RozliczenieRecord)rec).Zarzadca,
					row.ID
				};

				public SubTable<Rozliczenie> this[Zarzadca zarzadca] => new SubTable<Rozliczenie>(this, zarzadca);
			}

			public ZarzadcaRelation WgZarzadca => (ZarzadcaRelation)Session.Keys[keyInfoRozliczenieZarzadca];

			public class WgAdresuNieruchomosciKey : Key<Rozliczenie> {
				internal WgAdresuNieruchomosciKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((RozliczenieRecord)rec).AdresPelnyNieruchomosci.TrimEnd(),
					row.ID
				};

				public SubTable<Rozliczenie> this[string adrespelnynieruchomosci] => new SubTable<Rozliczenie>(this, adrespelnynieruchomosci);
			}

			public WgAdresuNieruchomosciKey WgAdresuNieruchomosci => (WgAdresuNieruchomosciKey)Session.Keys[keyInfoRozliczenieWgAdresuNieruchomosci];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="CzynszeModule"/>
			public new CzynszeModule Module => (CzynszeModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Rozliczenie"/>
			public new Rozliczenie this[int id] => (Rozliczenie)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Rozliczenie"/>
			public new Rozliczenie[] this[int[] ids] => (Rozliczenie[])base[ids];

			public new Rozliczenie this[Guid guid] => (Rozliczenie)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Rozliczenie();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("AdresPelnyNieruchomosci");
				names.Append(divider); names.Append("Data");
				names.Append(divider); names.Append("MiesiacRok");
				names.Append(divider); names.Append("DataKorekta");
				names.Append(divider); names.Append("WodaStawkaValue");
				names.Append(divider); names.Append("WodaStawkaSymbol");
				names.Append(divider); names.Append("WodaKorektaValue");
				names.Append(divider); names.Append("WodaKorektaSymbol");
				names.Append(divider); names.Append("SciekiStawkaValue");
				names.Append(divider); names.Append("SciekiStawkaSymbol");
				names.Append(divider); names.Append("SciekiKorektaValue");
				names.Append(divider); names.Append("SciekiKorektaSymbol");
				names.Append(divider); names.Append("CoStawkaValue");
				names.Append(divider); names.Append("CoStawkaSymbol");
				names.Append(divider); names.Append("CoKorektaValue");
				names.Append(divider); names.Append("CoKorektaSymbol");
				names.Append(divider); names.Append("KEksplStawkaValue");
				names.Append(divider); names.Append("KEksplStawkaSymbol");
				names.Append(divider); names.Append("KEksplKorektaValue");
				names.Append(divider); names.Append("KEksplKorektaSymbol");
				names.Append(divider); names.Append("WynZarzStawkaValue");
				names.Append(divider); names.Append("WynZarzStawkaSymbol");
				names.Append(divider); names.Append("WynZarzKorektaValue");
				names.Append(divider); names.Append("WynZarzKorektaSymbol");
				names.Append(divider); names.Append("DomofonStawkaValue");
				names.Append(divider); names.Append("DomofonStawkaSymbol");
				names.Append(divider); names.Append("DomofonKorektaValue");
				names.Append(divider); names.Append("DomofonKorektaSymbol");
				names.Append(divider); names.Append("EnergiaStawkaValue");
				names.Append(divider); names.Append("EnergiaStawkaSymbol");
				names.Append(divider); names.Append("EnergiaKorektaValue");
				names.Append(divider); names.Append("EnergiaKorektaSymbol");
				names.Append(divider); names.Append("WindaStawkaValue");
				names.Append(divider); names.Append("WindaStawkaSymbol");
				names.Append(divider); names.Append("WindaKorektaValue");
				names.Append(divider); names.Append("WindaKorektaSymbol");
				names.Append(divider); names.Append("AntenaStawkaValue");
				names.Append(divider); names.Append("AntenaStawkaSymbol");
				names.Append(divider); names.Append("AntenaKorektaValue");
				names.Append(divider); names.Append("AntenaKorektaSymbol");
				names.Append(divider); names.Append("CWUStawkaValue");
				names.Append(divider); names.Append("CWUStawkaSymbol");
				names.Append(divider); names.Append("CWUKorektaValue");
				names.Append(divider); names.Append("CWUKorektaSymbol");
				names.Append(divider); names.Append("SmieciStawkaValue");
				names.Append(divider); names.Append("SmieciStawkaSymbol");
				names.Append(divider); names.Append("SmieciKorektaValue");
				names.Append(divider); names.Append("SmieciKorektaSymbol");
				names.Append(divider); names.Append("SmieciSelStawkaValue");
				names.Append(divider); names.Append("SmieciSelStawkaSymbol");
				names.Append(divider); names.Append("SmieciSelKorektaValue");
				names.Append(divider); names.Append("SmieciSelKorektaSymbol");
				names.Append(divider); names.Append("SmieciNselStawkaValue");
				names.Append(divider); names.Append("SmieciNselStawkaSymbol");
				names.Append(divider); names.Append("SmieciNselKorektaValue");
				names.Append(divider); names.Append("SmieciNselKorektaSymbol");
				names.Append(divider); names.Append("FunduszRemontowyStawkaValue");
				names.Append(divider); names.Append("FunduszRemontowyStawkaSymbol");
				names.Append(divider); names.Append("FunduszRemontowyKorektaValue");
				names.Append(divider); names.Append("FunduszRemontowyKorektaSymbol");
				names.Append(divider); names.Append("Paragraf4260Value");
				names.Append(divider); names.Append("Paragraf4260Symbol");
				names.Append(divider); names.Append("Paragraf4260KorektaValue");
				names.Append(divider); names.Append("Paragraf4260KorektaSymbol");
				names.Append(divider); names.Append("Paragraf4300Value");
				names.Append(divider); names.Append("Paragraf4300Symbol");
				names.Append(divider); names.Append("Paragraf4300KorektaValue");
				names.Append(divider); names.Append("Paragraf4300KorektaSymbol");
				names.Append(divider); names.Append("Paragraf4270Value");
				names.Append(divider); names.Append("Paragraf4270Symbol");
				names.Append(divider); names.Append("Paragraf4270KorektaValue");
				names.Append(divider); names.Append("Paragraf4270KorektaSymbol");
				names.Append(divider); names.Append("FunduszRemontowyParagraf4270Value");
				names.Append(divider); names.Append("FunduszRemontowyParagraf4270Symbol");
				names.Append(divider); names.Append("FunduszRemontowyParagraf4270KorektaValue");
				names.Append(divider); names.Append("FunduszRemontowyParagraf4270KorektaSymbol");
				names.Append(divider); names.Append("SumaKorektValue");
				names.Append(divider); names.Append("SumaKorektSymbol");
				names.Append(divider); names.Append("SumaRozliczenValue");
				names.Append(divider); names.Append("SumaRozliczenSymbol");
				names.Append(divider); names.Append("SumaStawekValue");
				names.Append(divider); names.Append("SumaStawekSymbol");
				names.Append(divider); names.Append("SumaStawekBezFRValue");
				names.Append(divider); names.Append("SumaStawekBezFRSymbol");
				names.Append(divider); names.Append("FunduszRemontowyValue");
				names.Append(divider); names.Append("FunduszRemontowySymbol");
				names.Append(divider); names.Append("ZaplataZaliczka1Value");
				names.Append(divider); names.Append("ZaplataZaliczka1Symbol");
				names.Append(divider); names.Append("ZaplataZaliczka2Value");
				names.Append(divider); names.Append("ZaplataZaliczka2Symbol");
				names.Append(divider); names.Append("ZaplataZaliczka3Value");
				names.Append(divider); names.Append("ZaplataZaliczka3Symbol");
				names.Append(divider); names.Append("ZaplataFundusz1Value");
				names.Append(divider); names.Append("ZaplataFundusz1Symbol");
				names.Append(divider); names.Append("ZaplataFundusz2Value");
				names.Append(divider); names.Append("ZaplataFundusz2Symbol");
				names.Append(divider); names.Append("ZaplataFundusz3Value");
				names.Append(divider); names.Append("ZaplataFundusz3Symbol");
				names.Append(divider); names.Append("ZaplataFunduszValue");
				names.Append(divider); names.Append("ZaplataFunduszSymbol");
				names.Append(divider); names.Append("ZaplataZaliczkaValue");
				names.Append(divider); names.Append("ZaplataZaliczkaSymbol");
				names.Append(divider); names.Append("SumaParagraf4260Value");
				names.Append(divider); names.Append("SumaParagraf4260Symbol");
				names.Append(divider); names.Append("SumaParagraf4300Value");
				names.Append(divider); names.Append("SumaParagraf4300Symbol");
				names.Append(divider); names.Append("SumaParagraf4270Value");
				names.Append(divider); names.Append("SumaParagraf4270Symbol");
				names.Append(divider); names.Append("SumaParagraf4270FRValue");
				names.Append(divider); names.Append("SumaParagraf4270FRSymbol");
				names.Append(divider); names.Append("Nieruchomosc_wsk");
				names.Append(divider); names.Append("Zarzadca");
			}

		}

		public abstract partial class RozliczenieRow : GuidedRow {

			private RozliczenieRecord record;

			protected override void AssignRecord(Record rec) {
				record = (RozliczenieRecord)rec;
			}

			protected RozliczenieRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[MaxLength(150)]
			public string AdresPelnyNieruchomosci {
				get {
					if (record==null) GetRecord();
					return record.AdresPelnyNieruchomosci;
				}
				set {
					RozliczenieSchema.AdresPelnyNieruchomosciBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>AdresPelnyNieruchomosciLength) throw new ValueToLongException(this, "AdresPelnyNieruchomosci", AdresPelnyNieruchomosciLength);
					GetEdit(record==null, false);
					record.AdresPelnyNieruchomosci = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoRozliczenieWgAdresuNieruchomosci);
					}
					RozliczenieSchema.AdresPelnyNieruchomosciAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public const int AdresPelnyNieruchomosciLength = 150;

			[Required]
			public Date Data {
				get {
					if (record==null) GetRecord();
					return record.Data;
				}
				set {
					RozliczenieSchema.DataBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					if (value==Date.MinValue) throw new RequiredException(this, "Data");
					GetEdit(record==null, false);
					record.Data = value;
					RozliczenieSchema.DataAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			[MaxLength(40)]
			public string MiesiacRok {
				get {
					if (record==null) GetRecord();
					return record.MiesiacRok;
				}
				set {
					RozliczenieSchema.MiesiacRokBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>MiesiacRokLength) throw new ValueToLongException(this, "MiesiacRok", MiesiacRokLength);
					GetEdit(record==null, false);
					record.MiesiacRok = value;
					RozliczenieSchema.MiesiacRokAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public const int MiesiacRokLength = 40;

			public Date DataKorekta {
				get {
					if (record==null) GetRecord();
					return record.DataKorekta;
				}
				set {
					RozliczenieSchema.DataKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.DataKorekta = value;
					RozliczenieSchema.DataKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency WodaStawka {
				get {
					if (record==null) GetRecord();
					return record.WodaStawka;
				}
				set {
					RozliczenieSchema.WodaStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.WodaStawka = value;
					RozliczenieSchema.WodaStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency WodaKorekta {
				get {
					if (record==null) GetRecord();
					return record.WodaKorekta;
				}
				set {
					RozliczenieSchema.WodaKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.WodaKorekta = value;
					RozliczenieSchema.WodaKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SciekiStawka {
				get {
					if (record==null) GetRecord();
					return record.SciekiStawka;
				}
				set {
					RozliczenieSchema.SciekiStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SciekiStawka = value;
					RozliczenieSchema.SciekiStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SciekiKorekta {
				get {
					if (record==null) GetRecord();
					return record.SciekiKorekta;
				}
				set {
					RozliczenieSchema.SciekiKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SciekiKorekta = value;
					RozliczenieSchema.SciekiKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency CoStawka {
				get {
					if (record==null) GetRecord();
					return record.CoStawka;
				}
				set {
					RozliczenieSchema.CoStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.CoStawka = value;
					RozliczenieSchema.CoStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency CoKorekta {
				get {
					if (record==null) GetRecord();
					return record.CoKorekta;
				}
				set {
					RozliczenieSchema.CoKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.CoKorekta = value;
					RozliczenieSchema.CoKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency KEksplStawka {
				get {
					if (record==null) GetRecord();
					return record.KEksplStawka;
				}
				set {
					RozliczenieSchema.KEksplStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.KEksplStawka = value;
					RozliczenieSchema.KEksplStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency KEksplKorekta {
				get {
					if (record==null) GetRecord();
					return record.KEksplKorekta;
				}
				set {
					RozliczenieSchema.KEksplKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.KEksplKorekta = value;
					RozliczenieSchema.KEksplKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency WynZarzStawka {
				get {
					if (record==null) GetRecord();
					return record.WynZarzStawka;
				}
				set {
					RozliczenieSchema.WynZarzStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.WynZarzStawka = value;
					RozliczenieSchema.WynZarzStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency WynZarzKorekta {
				get {
					if (record==null) GetRecord();
					return record.WynZarzKorekta;
				}
				set {
					RozliczenieSchema.WynZarzKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.WynZarzKorekta = value;
					RozliczenieSchema.WynZarzKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency DomofonStawka {
				get {
					if (record==null) GetRecord();
					return record.DomofonStawka;
				}
				set {
					RozliczenieSchema.DomofonStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.DomofonStawka = value;
					RozliczenieSchema.DomofonStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency DomofonKorekta {
				get {
					if (record==null) GetRecord();
					return record.DomofonKorekta;
				}
				set {
					RozliczenieSchema.DomofonKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.DomofonKorekta = value;
					RozliczenieSchema.DomofonKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency EnergiaStawka {
				get {
					if (record==null) GetRecord();
					return record.EnergiaStawka;
				}
				set {
					RozliczenieSchema.EnergiaStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.EnergiaStawka = value;
					RozliczenieSchema.EnergiaStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency EnergiaKorekta {
				get {
					if (record==null) GetRecord();
					return record.EnergiaKorekta;
				}
				set {
					RozliczenieSchema.EnergiaKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.EnergiaKorekta = value;
					RozliczenieSchema.EnergiaKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency WindaStawka {
				get {
					if (record==null) GetRecord();
					return record.WindaStawka;
				}
				set {
					RozliczenieSchema.WindaStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.WindaStawka = value;
					RozliczenieSchema.WindaStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency WindaKorekta {
				get {
					if (record==null) GetRecord();
					return record.WindaKorekta;
				}
				set {
					RozliczenieSchema.WindaKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.WindaKorekta = value;
					RozliczenieSchema.WindaKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency AntenaStawka {
				get {
					if (record==null) GetRecord();
					return record.AntenaStawka;
				}
				set {
					RozliczenieSchema.AntenaStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.AntenaStawka = value;
					RozliczenieSchema.AntenaStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency AntenaKorekta {
				get {
					if (record==null) GetRecord();
					return record.AntenaKorekta;
				}
				set {
					RozliczenieSchema.AntenaKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.AntenaKorekta = value;
					RozliczenieSchema.AntenaKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency CWUStawka {
				get {
					if (record==null) GetRecord();
					return record.CWUStawka;
				}
				set {
					RozliczenieSchema.CWUStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.CWUStawka = value;
					RozliczenieSchema.CWUStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency CWUKorekta {
				get {
					if (record==null) GetRecord();
					return record.CWUKorekta;
				}
				set {
					RozliczenieSchema.CWUKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.CWUKorekta = value;
					RozliczenieSchema.CWUKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SmieciStawka {
				get {
					if (record==null) GetRecord();
					return record.SmieciStawka;
				}
				set {
					RozliczenieSchema.SmieciStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SmieciStawka = value;
					RozliczenieSchema.SmieciStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SmieciKorekta {
				get {
					if (record==null) GetRecord();
					return record.SmieciKorekta;
				}
				set {
					RozliczenieSchema.SmieciKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SmieciKorekta = value;
					RozliczenieSchema.SmieciKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SmieciSelStawka {
				get {
					if (record==null) GetRecord();
					return record.SmieciSelStawka;
				}
				set {
					RozliczenieSchema.SmieciSelStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SmieciSelStawka = value;
					RozliczenieSchema.SmieciSelStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SmieciSelKorekta {
				get {
					if (record==null) GetRecord();
					return record.SmieciSelKorekta;
				}
				set {
					RozliczenieSchema.SmieciSelKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SmieciSelKorekta = value;
					RozliczenieSchema.SmieciSelKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SmieciNselStawka {
				get {
					if (record==null) GetRecord();
					return record.SmieciNselStawka;
				}
				set {
					RozliczenieSchema.SmieciNselStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SmieciNselStawka = value;
					RozliczenieSchema.SmieciNselStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SmieciNselKorekta {
				get {
					if (record==null) GetRecord();
					return record.SmieciNselKorekta;
				}
				set {
					RozliczenieSchema.SmieciNselKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SmieciNselKorekta = value;
					RozliczenieSchema.SmieciNselKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency FunduszRemontowyStawka {
				get {
					if (record==null) GetRecord();
					return record.FunduszRemontowyStawka;
				}
				set {
					RozliczenieSchema.FunduszRemontowyStawkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.FunduszRemontowyStawka = value;
					RozliczenieSchema.FunduszRemontowyStawkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency FunduszRemontowyKorekta {
				get {
					if (record==null) GetRecord();
					return record.FunduszRemontowyKorekta;
				}
				set {
					RozliczenieSchema.FunduszRemontowyKorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.FunduszRemontowyKorekta = value;
					RozliczenieSchema.FunduszRemontowyKorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency Paragraf4260 {
				get {
					if (record==null) GetRecord();
					return record.Paragraf4260;
				}
				set {
					RozliczenieSchema.Paragraf4260BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.Paragraf4260 = value;
					RozliczenieSchema.Paragraf4260AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency Paragraf4260Korekta {
				get {
					if (record==null) GetRecord();
					return record.Paragraf4260Korekta;
				}
				set {
					RozliczenieSchema.Paragraf4260KorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.Paragraf4260Korekta = value;
					RozliczenieSchema.Paragraf4260KorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency Paragraf4300 {
				get {
					if (record==null) GetRecord();
					return record.Paragraf4300;
				}
				set {
					RozliczenieSchema.Paragraf4300BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.Paragraf4300 = value;
					RozliczenieSchema.Paragraf4300AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency Paragraf4300Korekta {
				get {
					if (record==null) GetRecord();
					return record.Paragraf4300Korekta;
				}
				set {
					RozliczenieSchema.Paragraf4300KorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.Paragraf4300Korekta = value;
					RozliczenieSchema.Paragraf4300KorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency Paragraf4270 {
				get {
					if (record==null) GetRecord();
					return record.Paragraf4270;
				}
				set {
					RozliczenieSchema.Paragraf4270BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.Paragraf4270 = value;
					RozliczenieSchema.Paragraf4270AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency Paragraf4270Korekta {
				get {
					if (record==null) GetRecord();
					return record.Paragraf4270Korekta;
				}
				set {
					RozliczenieSchema.Paragraf4270KorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.Paragraf4270Korekta = value;
					RozliczenieSchema.Paragraf4270KorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency FunduszRemontowyParagraf4270 {
				get {
					if (record==null) GetRecord();
					return record.FunduszRemontowyParagraf4270;
				}
				set {
					RozliczenieSchema.FunduszRemontowyParagraf4270BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.FunduszRemontowyParagraf4270 = value;
					RozliczenieSchema.FunduszRemontowyParagraf4270AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency FunduszRemontowyParagraf4270Korekta {
				get {
					if (record==null) GetRecord();
					return record.FunduszRemontowyParagraf4270Korekta;
				}
				set {
					RozliczenieSchema.FunduszRemontowyParagraf4270KorektaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.FunduszRemontowyParagraf4270Korekta = value;
					RozliczenieSchema.FunduszRemontowyParagraf4270KorektaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SumaKorekt {
				get {
					if (record==null) GetRecord();
					return record.SumaKorekt;
				}
				set {
					RozliczenieSchema.SumaKorektBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SumaKorekt = value;
					RozliczenieSchema.SumaKorektAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SumaRozliczen {
				get {
					if (record==null) GetRecord();
					return record.SumaRozliczen;
				}
				set {
					RozliczenieSchema.SumaRozliczenBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SumaRozliczen = value;
					RozliczenieSchema.SumaRozliczenAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SumaStawek {
				get {
					if (record==null) GetRecord();
					return record.SumaStawek;
				}
				set {
					RozliczenieSchema.SumaStawekBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SumaStawek = value;
					RozliczenieSchema.SumaStawekAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SumaStawekBezFR {
				get {
					if (record==null) GetRecord();
					return record.SumaStawekBezFR;
				}
				set {
					RozliczenieSchema.SumaStawekBezFRBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SumaStawekBezFR = value;
					RozliczenieSchema.SumaStawekBezFRAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency FunduszRemontowy {
				get {
					if (record==null) GetRecord();
					return record.FunduszRemontowy;
				}
				set {
					RozliczenieSchema.FunduszRemontowyBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.FunduszRemontowy = value;
					RozliczenieSchema.FunduszRemontowyAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency ZaplataZaliczka1 {
				get {
					if (record==null) GetRecord();
					return record.ZaplataZaliczka1;
				}
				set {
					RozliczenieSchema.ZaplataZaliczka1BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.ZaplataZaliczka1 = value;
					RozliczenieSchema.ZaplataZaliczka1AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency ZaplataZaliczka2 {
				get {
					if (record==null) GetRecord();
					return record.ZaplataZaliczka2;
				}
				set {
					RozliczenieSchema.ZaplataZaliczka2BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.ZaplataZaliczka2 = value;
					RozliczenieSchema.ZaplataZaliczka2AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency ZaplataZaliczka3 {
				get {
					if (record==null) GetRecord();
					return record.ZaplataZaliczka3;
				}
				set {
					RozliczenieSchema.ZaplataZaliczka3BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.ZaplataZaliczka3 = value;
					RozliczenieSchema.ZaplataZaliczka3AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency ZaplataFundusz1 {
				get {
					if (record==null) GetRecord();
					return record.ZaplataFundusz1;
				}
				set {
					RozliczenieSchema.ZaplataFundusz1BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.ZaplataFundusz1 = value;
					RozliczenieSchema.ZaplataFundusz1AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency ZaplataFundusz2 {
				get {
					if (record==null) GetRecord();
					return record.ZaplataFundusz2;
				}
				set {
					RozliczenieSchema.ZaplataFundusz2BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.ZaplataFundusz2 = value;
					RozliczenieSchema.ZaplataFundusz2AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency ZaplataFundusz3 {
				get {
					if (record==null) GetRecord();
					return record.ZaplataFundusz3;
				}
				set {
					RozliczenieSchema.ZaplataFundusz3BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.ZaplataFundusz3 = value;
					RozliczenieSchema.ZaplataFundusz3AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency ZaplataFundusz {
				get {
					if (record==null) GetRecord();
					return record.ZaplataFundusz;
				}
				set {
					RozliczenieSchema.ZaplataFunduszBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.ZaplataFundusz = value;
					RozliczenieSchema.ZaplataFunduszAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency ZaplataZaliczka {
				get {
					if (record==null) GetRecord();
					return record.ZaplataZaliczka;
				}
				set {
					RozliczenieSchema.ZaplataZaliczkaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.ZaplataZaliczka = value;
					RozliczenieSchema.ZaplataZaliczkaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SumaParagraf4260 {
				get {
					if (record==null) GetRecord();
					return record.SumaParagraf4260;
				}
				set {
					RozliczenieSchema.SumaParagraf4260BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SumaParagraf4260 = value;
					RozliczenieSchema.SumaParagraf4260AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SumaParagraf4300 {
				get {
					if (record==null) GetRecord();
					return record.SumaParagraf4300;
				}
				set {
					RozliczenieSchema.SumaParagraf4300BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SumaParagraf4300 = value;
					RozliczenieSchema.SumaParagraf4300AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SumaParagraf4270 {
				get {
					if (record==null) GetRecord();
					return record.SumaParagraf4270;
				}
				set {
					RozliczenieSchema.SumaParagraf4270BeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SumaParagraf4270 = value;
					RozliczenieSchema.SumaParagraf4270AfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Currency SumaParagraf4270FR {
				get {
					if (record==null) GetRecord();
					return record.SumaParagraf4270FR;
				}
				set {
					RozliczenieSchema.SumaParagraf4270FRBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					GetEdit(record==null, false);
					record.SumaParagraf4270FR = value;
					RozliczenieSchema.SumaParagraf4270FRAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			public Nieruchomosc Nieruchomosc_wsk {
				get {
					if (record==null) GetRecord();
					return (Nieruchomosc)GetRowReference(ref record.Nieruchomosc_wsk);
				}
				set {
					RozliczenieSchema.Nieruchomosc_wskBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					record.Nieruchomosc_wsk = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoRozliczenieNieruchomosc_wsk);
					}
					RozliczenieSchema.Nieruchomosc_wskAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			[Required]
			public Zarzadca Zarzadca {
				get {
					if (record==null) GetRecord();
					return (Zarzadca)GetRowReference(ref record.Zarzadca);
				}
				set {
					RozliczenieSchema.ZarzadcaBeforeEdit?.Invoke((Rozliczenie)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Zarzadca");
					record.Zarzadca = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoRozliczenieZarzadca);
					}
					RozliczenieSchema.ZarzadcaAfterEdit?.Invoke((Rozliczenie)this);
				}
			}

			[Browsable(false)]
			public new Rozliczenia Table => (Rozliczenia)base.Table;

			[Browsable(false)]
			public CzynszeModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoRozliczenia;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				RozliczenieSchema.OnCalcObjectRight?.Invoke((Rozliczenie)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				RozliczenieSchema.OnCalcParentsObjectRight?.Invoke((Rozliczenie)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				RozliczenieSchema.OnCalcReadOnly?.Invoke((Rozliczenie)this, ref result);
				return result;
			}

			class DataRequiredVerifier : RequiredVerifier {
				internal DataRequiredVerifier(IRow row) : base(row, "Data") {
				}
				protected override bool IsValid() => !(((RozliczenieRow)Row).Data==Date.MinValue);
			}

			class ZarzadcaRequiredVerifier : RequiredVerifier {
				internal ZarzadcaRequiredVerifier(IRow row) : base(row, "Zarzadca") {
				}
				protected override bool IsValid() => ((RozliczenieRow)Row).Zarzadca!=null;
			}

			protected override void OnAdded() {
				base.OnAdded();
				Session.Verifiers.Add(new DataRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Nieruchomosc_wsk==null || record.Nieruchomosc_wsk.State==RowState.Detached || Session==record.Nieruchomosc_wsk.Session);
				Session.Verifiers.Add(new ZarzadcaRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Zarzadca==null || record.Zarzadca.State==RowState.Detached || Session==record.Zarzadca.Session);
				RozliczenieSchema.OnAdded?.Invoke((Rozliczenie)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				RozliczenieSchema.OnLoaded?.Invoke((Rozliczenie)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				RozliczenieSchema.OnEditing?.Invoke((Rozliczenie)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				RozliczenieSchema.OnDeleting?.Invoke((Rozliczenie)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				RozliczenieSchema.OnDeleted?.Invoke((Rozliczenie)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				RozliczenieSchema.OnRepacked?.Invoke((Rozliczenie)this);
			}

		}

		public sealed class RozliczenieRecord : GuidedRecord {
			[MaxLength(150)]
			public string AdresPelnyNieruchomosci = "";
			[Required]
			public Date Data;
			[MaxLength(40)]
			public string MiesiacRok = "";
			public Date DataKorekta;
			public Currency WodaStawka;
			public Currency WodaKorekta;
			public Currency SciekiStawka;
			public Currency SciekiKorekta;
			public Currency CoStawka;
			public Currency CoKorekta;
			public Currency KEksplStawka;
			public Currency KEksplKorekta;
			public Currency WynZarzStawka;
			public Currency WynZarzKorekta;
			public Currency DomofonStawka;
			public Currency DomofonKorekta;
			public Currency EnergiaStawka;
			public Currency EnergiaKorekta;
			public Currency WindaStawka;
			public Currency WindaKorekta;
			public Currency AntenaStawka;
			public Currency AntenaKorekta;
			public Currency CWUStawka;
			public Currency CWUKorekta;
			public Currency SmieciStawka;
			public Currency SmieciKorekta;
			public Currency SmieciSelStawka;
			public Currency SmieciSelKorekta;
			public Currency SmieciNselStawka;
			public Currency SmieciNselKorekta;
			public Currency FunduszRemontowyStawka;
			public Currency FunduszRemontowyKorekta;
			public Currency Paragraf4260;
			public Currency Paragraf4260Korekta;
			public Currency Paragraf4300;
			public Currency Paragraf4300Korekta;
			public Currency Paragraf4270;
			public Currency Paragraf4270Korekta;
			public Currency FunduszRemontowyParagraf4270;
			public Currency FunduszRemontowyParagraf4270Korekta;
			public Currency SumaKorekt;
			public Currency SumaRozliczen;
			public Currency SumaStawek;
			public Currency SumaStawekBezFR;
			public Currency FunduszRemontowy;
			public Currency ZaplataZaliczka1;
			public Currency ZaplataZaliczka2;
			public Currency ZaplataZaliczka3;
			public Currency ZaplataFundusz1;
			public Currency ZaplataFundusz2;
			public Currency ZaplataFundusz3;
			public Currency ZaplataFundusz;
			public Currency ZaplataZaliczka;
			public Currency SumaParagraf4260;
			public Currency SumaParagraf4300;
			public Currency SumaParagraf4270;
			public Currency SumaParagraf4270FR;
			[ParentTable("Nieruchomosc")]
			public IRow Nieruchomosc_wsk;
			[Required]
			[ParentTable("Zarzadca")]
			public IRow Zarzadca;

			public override Record Clone() {
				RozliczenieRecord rec = (RozliczenieRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				AdresPelnyNieruchomosci = creator.Read_string();
				Data = creator.Read_date();
				MiesiacRok = creator.Read_string();
				DataKorekta = creator.Read_date();
				WodaStawka = creator.Read_currency();
				WodaKorekta = creator.Read_currency();
				SciekiStawka = creator.Read_currency();
				SciekiKorekta = creator.Read_currency();
				CoStawka = creator.Read_currency();
				CoKorekta = creator.Read_currency();
				KEksplStawka = creator.Read_currency();
				KEksplKorekta = creator.Read_currency();
				WynZarzStawka = creator.Read_currency();
				WynZarzKorekta = creator.Read_currency();
				DomofonStawka = creator.Read_currency();
				DomofonKorekta = creator.Read_currency();
				EnergiaStawka = creator.Read_currency();
				EnergiaKorekta = creator.Read_currency();
				WindaStawka = creator.Read_currency();
				WindaKorekta = creator.Read_currency();
				AntenaStawka = creator.Read_currency();
				AntenaKorekta = creator.Read_currency();
				CWUStawka = creator.Read_currency();
				CWUKorekta = creator.Read_currency();
				SmieciStawka = creator.Read_currency();
				SmieciKorekta = creator.Read_currency();
				SmieciSelStawka = creator.Read_currency();
				SmieciSelKorekta = creator.Read_currency();
				SmieciNselStawka = creator.Read_currency();
				SmieciNselKorekta = creator.Read_currency();
				FunduszRemontowyStawka = creator.Read_currency();
				FunduszRemontowyKorekta = creator.Read_currency();
				Paragraf4260 = creator.Read_currency();
				Paragraf4260Korekta = creator.Read_currency();
				Paragraf4300 = creator.Read_currency();
				Paragraf4300Korekta = creator.Read_currency();
				Paragraf4270 = creator.Read_currency();
				Paragraf4270Korekta = creator.Read_currency();
				FunduszRemontowyParagraf4270 = creator.Read_currency();
				FunduszRemontowyParagraf4270Korekta = creator.Read_currency();
				SumaKorekt = creator.Read_currency();
				SumaRozliczen = creator.Read_currency();
				SumaStawek = creator.Read_currency();
				SumaStawekBezFR = creator.Read_currency();
				FunduszRemontowy = creator.Read_currency();
				ZaplataZaliczka1 = creator.Read_currency();
				ZaplataZaliczka2 = creator.Read_currency();
				ZaplataZaliczka3 = creator.Read_currency();
				ZaplataFundusz1 = creator.Read_currency();
				ZaplataFundusz2 = creator.Read_currency();
				ZaplataFundusz3 = creator.Read_currency();
				ZaplataFundusz = creator.Read_currency();
				ZaplataZaliczka = creator.Read_currency();
				SumaParagraf4260 = creator.Read_currency();
				SumaParagraf4300 = creator.Read_currency();
				SumaParagraf4270 = creator.Read_currency();
				SumaParagraf4270FR = creator.Read_currency();
				Nieruchomosc_wsk = creator.Read_Row(tableInfoNieruchomosci);
				Zarzadca = creator.Read_Row(tableInfoZarzadcy);
			}
		}

		public static class RozliczenieSchema {

			internal static RowDelegate<RozliczenieRow, string> AdresPelnyNieruchomosciBeforeEdit;
			public static void AddAdresPelnyNieruchomosciBeforeEdit(RowDelegate<RozliczenieRow, string> value)
				=> AdresPelnyNieruchomosciBeforeEdit = (RowDelegate<RozliczenieRow, string>)Delegate.Combine(AdresPelnyNieruchomosciBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> AdresPelnyNieruchomosciAfterEdit;
			public static void AddAdresPelnyNieruchomosciAfterEdit(RowDelegate<RozliczenieRow> value)
				=> AdresPelnyNieruchomosciAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(AdresPelnyNieruchomosciAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Date> DataBeforeEdit;
			public static void AddDataBeforeEdit(RowDelegate<RozliczenieRow, Date> value)
				=> DataBeforeEdit = (RowDelegate<RozliczenieRow, Date>)Delegate.Combine(DataBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> DataAfterEdit;
			public static void AddDataAfterEdit(RowDelegate<RozliczenieRow> value)
				=> DataAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(DataAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, string> MiesiacRokBeforeEdit;
			public static void AddMiesiacRokBeforeEdit(RowDelegate<RozliczenieRow, string> value)
				=> MiesiacRokBeforeEdit = (RowDelegate<RozliczenieRow, string>)Delegate.Combine(MiesiacRokBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> MiesiacRokAfterEdit;
			public static void AddMiesiacRokAfterEdit(RowDelegate<RozliczenieRow> value)
				=> MiesiacRokAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(MiesiacRokAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Date> DataKorektaBeforeEdit;
			public static void AddDataKorektaBeforeEdit(RowDelegate<RozliczenieRow, Date> value)
				=> DataKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Date>)Delegate.Combine(DataKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> DataKorektaAfterEdit;
			public static void AddDataKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> DataKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(DataKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> WodaStawkaBeforeEdit;
			public static void AddWodaStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> WodaStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(WodaStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> WodaStawkaAfterEdit;
			public static void AddWodaStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> WodaStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(WodaStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> WodaKorektaBeforeEdit;
			public static void AddWodaKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> WodaKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(WodaKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> WodaKorektaAfterEdit;
			public static void AddWodaKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> WodaKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(WodaKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SciekiStawkaBeforeEdit;
			public static void AddSciekiStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SciekiStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SciekiStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SciekiStawkaAfterEdit;
			public static void AddSciekiStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SciekiStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SciekiStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SciekiKorektaBeforeEdit;
			public static void AddSciekiKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SciekiKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SciekiKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SciekiKorektaAfterEdit;
			public static void AddSciekiKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SciekiKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SciekiKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> CoStawkaBeforeEdit;
			public static void AddCoStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> CoStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(CoStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> CoStawkaAfterEdit;
			public static void AddCoStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> CoStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(CoStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> CoKorektaBeforeEdit;
			public static void AddCoKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> CoKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(CoKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> CoKorektaAfterEdit;
			public static void AddCoKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> CoKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(CoKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> KEksplStawkaBeforeEdit;
			public static void AddKEksplStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> KEksplStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(KEksplStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> KEksplStawkaAfterEdit;
			public static void AddKEksplStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> KEksplStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(KEksplStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> KEksplKorektaBeforeEdit;
			public static void AddKEksplKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> KEksplKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(KEksplKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> KEksplKorektaAfterEdit;
			public static void AddKEksplKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> KEksplKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(KEksplKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> WynZarzStawkaBeforeEdit;
			public static void AddWynZarzStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> WynZarzStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(WynZarzStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> WynZarzStawkaAfterEdit;
			public static void AddWynZarzStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> WynZarzStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(WynZarzStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> WynZarzKorektaBeforeEdit;
			public static void AddWynZarzKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> WynZarzKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(WynZarzKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> WynZarzKorektaAfterEdit;
			public static void AddWynZarzKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> WynZarzKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(WynZarzKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> DomofonStawkaBeforeEdit;
			public static void AddDomofonStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> DomofonStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(DomofonStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> DomofonStawkaAfterEdit;
			public static void AddDomofonStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> DomofonStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(DomofonStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> DomofonKorektaBeforeEdit;
			public static void AddDomofonKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> DomofonKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(DomofonKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> DomofonKorektaAfterEdit;
			public static void AddDomofonKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> DomofonKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(DomofonKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> EnergiaStawkaBeforeEdit;
			public static void AddEnergiaStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> EnergiaStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(EnergiaStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> EnergiaStawkaAfterEdit;
			public static void AddEnergiaStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> EnergiaStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(EnergiaStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> EnergiaKorektaBeforeEdit;
			public static void AddEnergiaKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> EnergiaKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(EnergiaKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> EnergiaKorektaAfterEdit;
			public static void AddEnergiaKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> EnergiaKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(EnergiaKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> WindaStawkaBeforeEdit;
			public static void AddWindaStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> WindaStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(WindaStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> WindaStawkaAfterEdit;
			public static void AddWindaStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> WindaStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(WindaStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> WindaKorektaBeforeEdit;
			public static void AddWindaKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> WindaKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(WindaKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> WindaKorektaAfterEdit;
			public static void AddWindaKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> WindaKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(WindaKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> AntenaStawkaBeforeEdit;
			public static void AddAntenaStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> AntenaStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(AntenaStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> AntenaStawkaAfterEdit;
			public static void AddAntenaStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> AntenaStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(AntenaStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> AntenaKorektaBeforeEdit;
			public static void AddAntenaKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> AntenaKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(AntenaKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> AntenaKorektaAfterEdit;
			public static void AddAntenaKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> AntenaKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(AntenaKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> CWUStawkaBeforeEdit;
			public static void AddCWUStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> CWUStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(CWUStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> CWUStawkaAfterEdit;
			public static void AddCWUStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> CWUStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(CWUStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> CWUKorektaBeforeEdit;
			public static void AddCWUKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> CWUKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(CWUKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> CWUKorektaAfterEdit;
			public static void AddCWUKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> CWUKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(CWUKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SmieciStawkaBeforeEdit;
			public static void AddSmieciStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SmieciStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SmieciStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SmieciStawkaAfterEdit;
			public static void AddSmieciStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SmieciStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SmieciStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SmieciKorektaBeforeEdit;
			public static void AddSmieciKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SmieciKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SmieciKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SmieciKorektaAfterEdit;
			public static void AddSmieciKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SmieciKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SmieciKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SmieciSelStawkaBeforeEdit;
			public static void AddSmieciSelStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SmieciSelStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SmieciSelStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SmieciSelStawkaAfterEdit;
			public static void AddSmieciSelStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SmieciSelStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SmieciSelStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SmieciSelKorektaBeforeEdit;
			public static void AddSmieciSelKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SmieciSelKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SmieciSelKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SmieciSelKorektaAfterEdit;
			public static void AddSmieciSelKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SmieciSelKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SmieciSelKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SmieciNselStawkaBeforeEdit;
			public static void AddSmieciNselStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SmieciNselStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SmieciNselStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SmieciNselStawkaAfterEdit;
			public static void AddSmieciNselStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SmieciNselStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SmieciNselStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SmieciNselKorektaBeforeEdit;
			public static void AddSmieciNselKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SmieciNselKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SmieciNselKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SmieciNselKorektaAfterEdit;
			public static void AddSmieciNselKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SmieciNselKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SmieciNselKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> FunduszRemontowyStawkaBeforeEdit;
			public static void AddFunduszRemontowyStawkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> FunduszRemontowyStawkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(FunduszRemontowyStawkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> FunduszRemontowyStawkaAfterEdit;
			public static void AddFunduszRemontowyStawkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> FunduszRemontowyStawkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(FunduszRemontowyStawkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> FunduszRemontowyKorektaBeforeEdit;
			public static void AddFunduszRemontowyKorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> FunduszRemontowyKorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(FunduszRemontowyKorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> FunduszRemontowyKorektaAfterEdit;
			public static void AddFunduszRemontowyKorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> FunduszRemontowyKorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(FunduszRemontowyKorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> Paragraf4260BeforeEdit;
			public static void AddParagraf4260BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> Paragraf4260BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(Paragraf4260BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> Paragraf4260AfterEdit;
			public static void AddParagraf4260AfterEdit(RowDelegate<RozliczenieRow> value)
				=> Paragraf4260AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(Paragraf4260AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> Paragraf4260KorektaBeforeEdit;
			public static void AddParagraf4260KorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> Paragraf4260KorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(Paragraf4260KorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> Paragraf4260KorektaAfterEdit;
			public static void AddParagraf4260KorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> Paragraf4260KorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(Paragraf4260KorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> Paragraf4300BeforeEdit;
			public static void AddParagraf4300BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> Paragraf4300BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(Paragraf4300BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> Paragraf4300AfterEdit;
			public static void AddParagraf4300AfterEdit(RowDelegate<RozliczenieRow> value)
				=> Paragraf4300AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(Paragraf4300AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> Paragraf4300KorektaBeforeEdit;
			public static void AddParagraf4300KorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> Paragraf4300KorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(Paragraf4300KorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> Paragraf4300KorektaAfterEdit;
			public static void AddParagraf4300KorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> Paragraf4300KorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(Paragraf4300KorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> Paragraf4270BeforeEdit;
			public static void AddParagraf4270BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> Paragraf4270BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(Paragraf4270BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> Paragraf4270AfterEdit;
			public static void AddParagraf4270AfterEdit(RowDelegate<RozliczenieRow> value)
				=> Paragraf4270AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(Paragraf4270AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> Paragraf4270KorektaBeforeEdit;
			public static void AddParagraf4270KorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> Paragraf4270KorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(Paragraf4270KorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> Paragraf4270KorektaAfterEdit;
			public static void AddParagraf4270KorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> Paragraf4270KorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(Paragraf4270KorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> FunduszRemontowyParagraf4270BeforeEdit;
			public static void AddFunduszRemontowyParagraf4270BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> FunduszRemontowyParagraf4270BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(FunduszRemontowyParagraf4270BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> FunduszRemontowyParagraf4270AfterEdit;
			public static void AddFunduszRemontowyParagraf4270AfterEdit(RowDelegate<RozliczenieRow> value)
				=> FunduszRemontowyParagraf4270AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(FunduszRemontowyParagraf4270AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> FunduszRemontowyParagraf4270KorektaBeforeEdit;
			public static void AddFunduszRemontowyParagraf4270KorektaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> FunduszRemontowyParagraf4270KorektaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(FunduszRemontowyParagraf4270KorektaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> FunduszRemontowyParagraf4270KorektaAfterEdit;
			public static void AddFunduszRemontowyParagraf4270KorektaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> FunduszRemontowyParagraf4270KorektaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(FunduszRemontowyParagraf4270KorektaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SumaKorektBeforeEdit;
			public static void AddSumaKorektBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SumaKorektBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SumaKorektBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SumaKorektAfterEdit;
			public static void AddSumaKorektAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SumaKorektAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SumaKorektAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SumaRozliczenBeforeEdit;
			public static void AddSumaRozliczenBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SumaRozliczenBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SumaRozliczenBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SumaRozliczenAfterEdit;
			public static void AddSumaRozliczenAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SumaRozliczenAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SumaRozliczenAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SumaStawekBeforeEdit;
			public static void AddSumaStawekBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SumaStawekBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SumaStawekBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SumaStawekAfterEdit;
			public static void AddSumaStawekAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SumaStawekAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SumaStawekAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SumaStawekBezFRBeforeEdit;
			public static void AddSumaStawekBezFRBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SumaStawekBezFRBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SumaStawekBezFRBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SumaStawekBezFRAfterEdit;
			public static void AddSumaStawekBezFRAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SumaStawekBezFRAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SumaStawekBezFRAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> FunduszRemontowyBeforeEdit;
			public static void AddFunduszRemontowyBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> FunduszRemontowyBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(FunduszRemontowyBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> FunduszRemontowyAfterEdit;
			public static void AddFunduszRemontowyAfterEdit(RowDelegate<RozliczenieRow> value)
				=> FunduszRemontowyAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(FunduszRemontowyAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> ZaplataZaliczka1BeforeEdit;
			public static void AddZaplataZaliczka1BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> ZaplataZaliczka1BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(ZaplataZaliczka1BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZaplataZaliczka1AfterEdit;
			public static void AddZaplataZaliczka1AfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZaplataZaliczka1AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZaplataZaliczka1AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> ZaplataZaliczka2BeforeEdit;
			public static void AddZaplataZaliczka2BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> ZaplataZaliczka2BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(ZaplataZaliczka2BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZaplataZaliczka2AfterEdit;
			public static void AddZaplataZaliczka2AfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZaplataZaliczka2AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZaplataZaliczka2AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> ZaplataZaliczka3BeforeEdit;
			public static void AddZaplataZaliczka3BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> ZaplataZaliczka3BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(ZaplataZaliczka3BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZaplataZaliczka3AfterEdit;
			public static void AddZaplataZaliczka3AfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZaplataZaliczka3AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZaplataZaliczka3AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> ZaplataFundusz1BeforeEdit;
			public static void AddZaplataFundusz1BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> ZaplataFundusz1BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(ZaplataFundusz1BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZaplataFundusz1AfterEdit;
			public static void AddZaplataFundusz1AfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZaplataFundusz1AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZaplataFundusz1AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> ZaplataFundusz2BeforeEdit;
			public static void AddZaplataFundusz2BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> ZaplataFundusz2BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(ZaplataFundusz2BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZaplataFundusz2AfterEdit;
			public static void AddZaplataFundusz2AfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZaplataFundusz2AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZaplataFundusz2AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> ZaplataFundusz3BeforeEdit;
			public static void AddZaplataFundusz3BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> ZaplataFundusz3BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(ZaplataFundusz3BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZaplataFundusz3AfterEdit;
			public static void AddZaplataFundusz3AfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZaplataFundusz3AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZaplataFundusz3AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> ZaplataFunduszBeforeEdit;
			public static void AddZaplataFunduszBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> ZaplataFunduszBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(ZaplataFunduszBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZaplataFunduszAfterEdit;
			public static void AddZaplataFunduszAfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZaplataFunduszAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZaplataFunduszAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> ZaplataZaliczkaBeforeEdit;
			public static void AddZaplataZaliczkaBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> ZaplataZaliczkaBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(ZaplataZaliczkaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZaplataZaliczkaAfterEdit;
			public static void AddZaplataZaliczkaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZaplataZaliczkaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZaplataZaliczkaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SumaParagraf4260BeforeEdit;
			public static void AddSumaParagraf4260BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SumaParagraf4260BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SumaParagraf4260BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SumaParagraf4260AfterEdit;
			public static void AddSumaParagraf4260AfterEdit(RowDelegate<RozliczenieRow> value)
				=> SumaParagraf4260AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SumaParagraf4260AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SumaParagraf4300BeforeEdit;
			public static void AddSumaParagraf4300BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SumaParagraf4300BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SumaParagraf4300BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SumaParagraf4300AfterEdit;
			public static void AddSumaParagraf4300AfterEdit(RowDelegate<RozliczenieRow> value)
				=> SumaParagraf4300AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SumaParagraf4300AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SumaParagraf4270BeforeEdit;
			public static void AddSumaParagraf4270BeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SumaParagraf4270BeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SumaParagraf4270BeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SumaParagraf4270AfterEdit;
			public static void AddSumaParagraf4270AfterEdit(RowDelegate<RozliczenieRow> value)
				=> SumaParagraf4270AfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SumaParagraf4270AfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Currency> SumaParagraf4270FRBeforeEdit;
			public static void AddSumaParagraf4270FRBeforeEdit(RowDelegate<RozliczenieRow, Currency> value)
				=> SumaParagraf4270FRBeforeEdit = (RowDelegate<RozliczenieRow, Currency>)Delegate.Combine(SumaParagraf4270FRBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> SumaParagraf4270FRAfterEdit;
			public static void AddSumaParagraf4270FRAfterEdit(RowDelegate<RozliczenieRow> value)
				=> SumaParagraf4270FRAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(SumaParagraf4270FRAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Nieruchomosc> Nieruchomosc_wskBeforeEdit;
			public static void AddNieruchomosc_wskBeforeEdit(RowDelegate<RozliczenieRow, Nieruchomosc> value)
				=> Nieruchomosc_wskBeforeEdit = (RowDelegate<RozliczenieRow, Nieruchomosc>)Delegate.Combine(Nieruchomosc_wskBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> Nieruchomosc_wskAfterEdit;
			public static void AddNieruchomosc_wskAfterEdit(RowDelegate<RozliczenieRow> value)
				=> Nieruchomosc_wskAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(Nieruchomosc_wskAfterEdit, value);

			internal static RowDelegate<RozliczenieRow, Zarzadca> ZarzadcaBeforeEdit;
			public static void AddZarzadcaBeforeEdit(RowDelegate<RozliczenieRow, Zarzadca> value)
				=> ZarzadcaBeforeEdit = (RowDelegate<RozliczenieRow, Zarzadca>)Delegate.Combine(ZarzadcaBeforeEdit, value);

			internal static RowDelegate<RozliczenieRow> ZarzadcaAfterEdit;
			public static void AddZarzadcaAfterEdit(RowDelegate<RozliczenieRow> value)
				=> ZarzadcaAfterEdit = (RowDelegate<RozliczenieRow>)Delegate.Combine(ZarzadcaAfterEdit, value);

			internal static RowDelegate<RozliczenieRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<RozliczenieRow> value)
				=> OnLoaded = (RowDelegate<RozliczenieRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<RozliczenieRow> OnAdded;
			public static void AddOnAdded(RowDelegate<RozliczenieRow> value)
				=> OnAdded = (RowDelegate<RozliczenieRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<RozliczenieRow> OnEditing;
			public static void AddOnEditing(RowDelegate<RozliczenieRow> value)
				=> OnEditing = (RowDelegate<RozliczenieRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<RozliczenieRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<RozliczenieRow> value)
				=> OnDeleting = (RowDelegate<RozliczenieRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<RozliczenieRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<RozliczenieRow> value)
				=> OnDeleted = (RowDelegate<RozliczenieRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<RozliczenieRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<RozliczenieRow> value)
				=> OnRepacked = (RowDelegate<RozliczenieRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<RozliczenieRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<RozliczenieRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<RozliczenieRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<RozliczenieRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<RozliczenieRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<RozliczenieRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<RozliczenieRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<RozliczenieRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<RozliczenieRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

		private static Soneta.Business.App.TableInfo tableInfoNieruchomosci = new Soneta.Business.App.TableInfo.Create<Nieruchomosci, Nieruchomosc, NieruchomoscRecord>("Nierucho") {
		};

		public Nieruchomosci Nieruchomosci => (Nieruchomosci)Session.Tables[tableInfoNieruchomosci];

		private static Soneta.Business.App.KeyInfo keyInfoNieruchomoscRozliczenie = new Soneta.Business.App.KeyInfo(tableInfoNieruchomosci, table => new NieruchomoscTable.RozliczenieRelation(table)) {
			Name = "Nieruchomosc_Rozliczenie",
			RelationTo = "Rozliczenie",
			DeleteCascade = true,
			KeyFields = new[] {"Rozliczenie", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoNieruchomoscZarzadca = new Soneta.Business.App.KeyInfo(tableInfoNieruchomosci, table => new NieruchomoscTable.ZarzadcaRelation(table)) {
			Name = "Nieruchomosc_Zarzadca",
			RelationTo = "Zarzadca",
			DeleteCascade = true,
			KeyFields = new[] {"Zarzadca", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoNieruchomoscWgAdresuNieruchomosci = new Soneta.Business.App.KeyInfo(tableInfoNieruchomosci, table => new NieruchomoscTable.WgAdresuNieruchomosciKey(table)) {
			Name = "WgAdresuNieruchomosci",
			PrimaryKey = true,
			KeyFields = new[] {"AdresPelnyNieruchomosci", "ID"},
		};

		private static Soneta.Business.App.KeyInfo keyInfoNieruchomoscWgKoduLokalu = new Soneta.Business.App.KeyInfo(tableInfoNieruchomosci, table => new NieruchomoscTable.WgKoduLokaluKey(table)) {
			Name = "WgKoduLokalu",
			KeyFields = new[] {"KodLokalu", "ID"},
		};

		/// <summary>
		/// Klasa implementująca standardową obsługę tabeli obiektów Nieruchomosc.
		/// Dziedzicząca klasa <see cref="Nieruchomosci"/> zawiera kod użytkownika
		/// zawierający specyficzną funkcjonalność tabeli, która nie zawiera się w funkcjonalności
		/// biblioteki <see cref="Soneta.Business"/>.
		/// </summary>
		/// <seealso cref="Nieruchomosci"/>
		/// <seealso cref="NieruchomoscRow"/>
		/// <seealso cref="Nieruchomosc"/>
		/// <seealso cref="Soneta.Business.Table"/>
		[Caption("Tabela lokali")]
		public abstract partial class NieruchomoscTable : GuidedTable {

			protected NieruchomoscTable() {}

			public class RozliczenieRelation : Key<Nieruchomosc> {
				internal RozliczenieRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((NieruchomoscRecord)rec).Rozliczenie,
					row.ID
				};

				public SubTable<Nieruchomosc> this[Rozliczenie rozliczenie] => new SubTable<Nieruchomosc>(this, rozliczenie);
			}

			public RozliczenieRelation WgRozliczenie => (RozliczenieRelation)Session.Keys[keyInfoNieruchomoscRozliczenie];

			public class ZarzadcaRelation : Key<Nieruchomosc> {
				internal ZarzadcaRelation(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((NieruchomoscRecord)rec).Zarzadca,
					row.ID
				};

				public SubTable<Nieruchomosc> this[Zarzadca zarzadca] => new SubTable<Nieruchomosc>(this, zarzadca);
			}

			public ZarzadcaRelation WgZarzadca => (ZarzadcaRelation)Session.Keys[keyInfoNieruchomoscZarzadca];

			public class WgAdresuNieruchomosciKey : Key<Nieruchomosc> {
				internal WgAdresuNieruchomosciKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((NieruchomoscRecord)rec).AdresPelnyNieruchomosci.TrimEnd(),
					row.ID
				};

				public SubTable<Nieruchomosc> this[string adrespelnynieruchomosci] => new SubTable<Nieruchomosc>(this, adrespelnynieruchomosci);
			}

			public WgAdresuNieruchomosciKey WgAdresuNieruchomosci => (WgAdresuNieruchomosciKey)Session.Keys[keyInfoNieruchomoscWgAdresuNieruchomosci];

			public class WgKoduLokaluKey : Key<Nieruchomosc> {
				internal WgKoduLokaluKey(Table table) : base(table) {
				}

				protected override object[] GetData(Row row, Record rec) => new object[] {
					((NieruchomoscRecord)rec).KodLokalu.TrimEnd(),
					row.ID
				};

				public SubTable<Nieruchomosc> this[string kodlokalu] => new SubTable<Nieruchomosc>(this, kodlokalu);
			}

			public WgKoduLokaluKey WgKoduLokalu => (WgKoduLokaluKey)Session.Keys[keyInfoNieruchomoscWgKoduLokalu];


			/// <summary>
			/// Typowane property dostarczające obiekt modułu zawierającegą tą tabelę. Umożliwia dostęp do
			/// innych obiektów znajdujących się w tym samym module.
			/// </summary>
			/// <seealso cref="CzynszeModule"/>
			public new CzynszeModule Module => (CzynszeModule)base.Module;

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// ID identyfikującego jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Liczba będąca unikalnym identyfikatorem obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Nieruchomosc"/>
			public new Nieruchomosc this[int id] => (Nieruchomosc)base[id];

			/// <summary>
			/// Typowany indekser dostarczający obiekty znajdujące się w tej tabeli przy pomocy 
			/// tablicy ID identyfikujących jednoznacznie obiekt w systemie.
			/// </summary>
			/// <param name="id">Tablica liczb będąca unikalnymi identyfikatorami obiektu. Wartości
			/// ujemne identyfikują obiekty, które zostały dodane i nie są jeszcze zapisane do bazy danych.</param>
			/// <seealso cref="Nieruchomosc"/>
			public new Nieruchomosc[] this[int[] ids] => (Nieruchomosc[])base[ids];

			public new Nieruchomosc this[Guid guid] => (Nieruchomosc)base[guid];

			protected override Row CreateRow(RowCreator creator) => new Nieruchomosc();

			[Soneta.Langs.TranslateIgnore]
			protected override sealed void PrepareNames(StringBuilder names, string divider) {
				names.Append(divider); names.Append("Guid");
				names.Append(divider); names.Append("AdresPelnyNieruchomosci");
				names.Append(divider); names.Append("Nieaktywny");
				names.Append(divider); names.Append("KodLokalu");
				names.Append(divider); names.Append("KodPocztowy");
				names.Append(divider); names.Append("ImieNajemcy");
				names.Append(divider); names.Append("NazwiskoNajemcy");
				names.Append(divider); names.Append("OpisDodatkowy");
				names.Append(divider); names.Append("UlicaNajemcy");
				names.Append(divider); names.Append("NumerBramyNajemcy");
				names.Append(divider); names.Append("NumerMieszkaniaNajemcy");
				names.Append(divider); names.Append("KodPocztowyNajemcy");
				names.Append(divider); names.Append("Miasto");
				names.Append(divider); names.Append("MiastoNajemcy");
				names.Append(divider); names.Append("StawkaWodaValue");
				names.Append(divider); names.Append("StawkaWodaSymbol");
				names.Append(divider); names.Append("StawkaSciekiValue");
				names.Append(divider); names.Append("StawkaSciekiSymbol");
				names.Append(divider); names.Append("StawkaCoValue");
				names.Append(divider); names.Append("StawkaCoSymbol");
				names.Append(divider); names.Append("StawkaSmieciValue");
				names.Append(divider); names.Append("StawkaSmieciSymbol");
				names.Append(divider); names.Append("StawkaKEksplValue");
				names.Append(divider); names.Append("StawkaKEksplSymbol");
				names.Append(divider); names.Append("StawkaWynZarzValue");
				names.Append(divider); names.Append("StawkaWynZarzSymbol");
				names.Append(divider); names.Append("StawkaDomofonValue");
				names.Append(divider); names.Append("StawkaDomofonSymbol");
				names.Append(divider); names.Append("StawkaEnergiaValue");
				names.Append(divider); names.Append("StawkaEnergiaSymbol");
				names.Append(divider); names.Append("StawkaWindaValue");
				names.Append(divider); names.Append("StawkaWindaSymbol");
				names.Append(divider); names.Append("StawkaAntenaValue");
				names.Append(divider); names.Append("StawkaAntenaSymbol");
				names.Append(divider); names.Append("StawkaCWUValue");
				names.Append(divider); names.Append("StawkaCWUSymbol");
				names.Append(divider); names.Append("StawkaSmieciSelValue");
				names.Append(divider); names.Append("StawkaSmieciSelSymbol");
				names.Append(divider); names.Append("StawkaSmieciNselValue");
				names.Append(divider); names.Append("StawkaSmieciNselSymbol");
				names.Append(divider); names.Append("StawkaCaloscValue");
				names.Append(divider); names.Append("StawkaCaloscSymbol");
				names.Append(divider); names.Append("StawkaFunduszRemontowyValue");
				names.Append(divider); names.Append("StawkaFunduszRemontowySymbol");
				names.Append(divider); names.Append("SumaStawekBezFRValue");
				names.Append(divider); names.Append("SumaStawekBezFRSymbol");
				names.Append(divider); names.Append("KontoFundusz");
				names.Append(divider); names.Append("KontoZaliczki");
				names.Append(divider); names.Append("Rozliczenie");
				names.Append(divider); names.Append("Zarzadca");
			}

		}

		public abstract partial class NieruchomoscRow : GuidedRow {

			private NieruchomoscRecord record;

			protected override void AssignRecord(Record rec) {
				record = (NieruchomoscRecord)rec;
			}

			protected NieruchomoscRow() : base(true) {
			}

			protected override Row PrimaryRow => null;

			[MaxLength(150)]
			public string AdresPelnyNieruchomosci {
				get {
					if (record==null) GetRecord();
					return record.AdresPelnyNieruchomosci;
				}
				set {
					NieruchomoscSchema.AdresPelnyNieruchomosciBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>AdresPelnyNieruchomosciLength) throw new ValueToLongException(this, "AdresPelnyNieruchomosci", AdresPelnyNieruchomosciLength);
					GetEdit(record==null, false);
					record.AdresPelnyNieruchomosci = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoNieruchomoscWgAdresuNieruchomosci);
					}
					NieruchomoscSchema.AdresPelnyNieruchomosciAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int AdresPelnyNieruchomosciLength = 150;

			public bool Nieaktywny {
				get {
					if (record==null) GetRecord();
					return record.Nieaktywny;
				}
				set {
					NieruchomoscSchema.NieaktywnyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.Nieaktywny = value;
					NieruchomoscSchema.NieaktywnyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			[MaxLength(150)]
			public string KodLokalu {
				get {
					if (record==null) GetRecord();
					return record.KodLokalu;
				}
				set {
					NieruchomoscSchema.KodLokaluBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KodLokaluLength) throw new ValueToLongException(this, "KodLokalu", KodLokaluLength);
					GetEdit(record==null, false);
					record.KodLokalu = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoNieruchomoscWgKoduLokalu);
					}
					NieruchomoscSchema.KodLokaluAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int KodLokaluLength = 150;

			[MaxLength(150)]
			public string KodPocztowy {
				get {
					if (record==null) GetRecord();
					return record.KodPocztowy;
				}
				set {
					NieruchomoscSchema.KodPocztowyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KodPocztowyLength) throw new ValueToLongException(this, "KodPocztowy", KodPocztowyLength);
					GetEdit(record==null, false);
					record.KodPocztowy = value;
					NieruchomoscSchema.KodPocztowyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int KodPocztowyLength = 150;

			[MaxLength(80)]
			public string ImieNajemcy {
				get {
					if (record==null) GetRecord();
					return record.ImieNajemcy;
				}
				set {
					NieruchomoscSchema.ImieNajemcyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>ImieNajemcyLength) throw new ValueToLongException(this, "ImieNajemcy", ImieNajemcyLength);
					GetEdit(record==null, false);
					record.ImieNajemcy = value;
					NieruchomoscSchema.ImieNajemcyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int ImieNajemcyLength = 80;

			[MaxLength(80)]
			public string NazwiskoNajemcy {
				get {
					if (record==null) GetRecord();
					return record.NazwiskoNajemcy;
				}
				set {
					NieruchomoscSchema.NazwiskoNajemcyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>NazwiskoNajemcyLength) throw new ValueToLongException(this, "NazwiskoNajemcy", NazwiskoNajemcyLength);
					GetEdit(record==null, false);
					record.NazwiskoNajemcy = value;
					NieruchomoscSchema.NazwiskoNajemcyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int NazwiskoNajemcyLength = 80;

			[MaxLength(200)]
			public string OpisDodatkowy {
				get {
					if (record==null) GetRecord();
					return record.OpisDodatkowy;
				}
				set {
					NieruchomoscSchema.OpisDodatkowyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>OpisDodatkowyLength) throw new ValueToLongException(this, "OpisDodatkowy", OpisDodatkowyLength);
					GetEdit(record==null, false);
					record.OpisDodatkowy = value;
					NieruchomoscSchema.OpisDodatkowyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int OpisDodatkowyLength = 200;

			[MaxLength(80)]
			public string UlicaNajemcy {
				get {
					if (record==null) GetRecord();
					return record.UlicaNajemcy;
				}
				set {
					NieruchomoscSchema.UlicaNajemcyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>UlicaNajemcyLength) throw new ValueToLongException(this, "UlicaNajemcy", UlicaNajemcyLength);
					GetEdit(record==null, false);
					record.UlicaNajemcy = value;
					NieruchomoscSchema.UlicaNajemcyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int UlicaNajemcyLength = 80;

			[MaxLength(5)]
			public string NumerBramyNajemcy {
				get {
					if (record==null) GetRecord();
					return record.NumerBramyNajemcy;
				}
				set {
					NieruchomoscSchema.NumerBramyNajemcyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>NumerBramyNajemcyLength) throw new ValueToLongException(this, "NumerBramyNajemcy", NumerBramyNajemcyLength);
					GetEdit(record==null, false);
					record.NumerBramyNajemcy = value;
					NieruchomoscSchema.NumerBramyNajemcyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int NumerBramyNajemcyLength = 5;

			[MaxLength(5)]
			public string NumerMieszkaniaNajemcy {
				get {
					if (record==null) GetRecord();
					return record.NumerMieszkaniaNajemcy;
				}
				set {
					NieruchomoscSchema.NumerMieszkaniaNajemcyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>NumerMieszkaniaNajemcyLength) throw new ValueToLongException(this, "NumerMieszkaniaNajemcy", NumerMieszkaniaNajemcyLength);
					GetEdit(record==null, false);
					record.NumerMieszkaniaNajemcy = value;
					NieruchomoscSchema.NumerMieszkaniaNajemcyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int NumerMieszkaniaNajemcyLength = 5;

			[MaxLength(6)]
			public string KodPocztowyNajemcy {
				get {
					if (record==null) GetRecord();
					return record.KodPocztowyNajemcy;
				}
				set {
					NieruchomoscSchema.KodPocztowyNajemcyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KodPocztowyNajemcyLength) throw new ValueToLongException(this, "KodPocztowyNajemcy", KodPocztowyNajemcyLength);
					GetEdit(record==null, false);
					record.KodPocztowyNajemcy = value;
					NieruchomoscSchema.KodPocztowyNajemcyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int KodPocztowyNajemcyLength = 6;

			[MaxLength(50)]
			public string Miasto {
				get {
					if (record==null) GetRecord();
					return record.Miasto;
				}
				set {
					NieruchomoscSchema.MiastoBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>MiastoLength) throw new ValueToLongException(this, "Miasto", MiastoLength);
					GetEdit(record==null, false);
					record.Miasto = value;
					NieruchomoscSchema.MiastoAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int MiastoLength = 50;

			[MaxLength(50)]
			public string MiastoNajemcy {
				get {
					if (record==null) GetRecord();
					return record.MiastoNajemcy;
				}
				set {
					NieruchomoscSchema.MiastoNajemcyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>MiastoNajemcyLength) throw new ValueToLongException(this, "MiastoNajemcy", MiastoNajemcyLength);
					GetEdit(record==null, false);
					record.MiastoNajemcy = value;
					NieruchomoscSchema.MiastoNajemcyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int MiastoNajemcyLength = 50;

			public Currency StawkaWoda {
				get {
					if (record==null) GetRecord();
					return record.StawkaWoda;
				}
				set {
					NieruchomoscSchema.StawkaWodaBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaWoda = value;
					NieruchomoscSchema.StawkaWodaAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaScieki {
				get {
					if (record==null) GetRecord();
					return record.StawkaScieki;
				}
				set {
					NieruchomoscSchema.StawkaSciekiBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaScieki = value;
					NieruchomoscSchema.StawkaSciekiAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaCo {
				get {
					if (record==null) GetRecord();
					return record.StawkaCo;
				}
				set {
					NieruchomoscSchema.StawkaCoBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaCo = value;
					NieruchomoscSchema.StawkaCoAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaSmieci {
				get {
					if (record==null) GetRecord();
					return record.StawkaSmieci;
				}
				set {
					NieruchomoscSchema.StawkaSmieciBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaSmieci = value;
					NieruchomoscSchema.StawkaSmieciAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaKEkspl {
				get {
					if (record==null) GetRecord();
					return record.StawkaKEkspl;
				}
				set {
					NieruchomoscSchema.StawkaKEksplBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaKEkspl = value;
					NieruchomoscSchema.StawkaKEksplAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaWynZarz {
				get {
					if (record==null) GetRecord();
					return record.StawkaWynZarz;
				}
				set {
					NieruchomoscSchema.StawkaWynZarzBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaWynZarz = value;
					NieruchomoscSchema.StawkaWynZarzAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaDomofon {
				get {
					if (record==null) GetRecord();
					return record.StawkaDomofon;
				}
				set {
					NieruchomoscSchema.StawkaDomofonBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaDomofon = value;
					NieruchomoscSchema.StawkaDomofonAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaEnergia {
				get {
					if (record==null) GetRecord();
					return record.StawkaEnergia;
				}
				set {
					NieruchomoscSchema.StawkaEnergiaBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaEnergia = value;
					NieruchomoscSchema.StawkaEnergiaAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaWinda {
				get {
					if (record==null) GetRecord();
					return record.StawkaWinda;
				}
				set {
					NieruchomoscSchema.StawkaWindaBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaWinda = value;
					NieruchomoscSchema.StawkaWindaAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaAntena {
				get {
					if (record==null) GetRecord();
					return record.StawkaAntena;
				}
				set {
					NieruchomoscSchema.StawkaAntenaBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaAntena = value;
					NieruchomoscSchema.StawkaAntenaAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaCWU {
				get {
					if (record==null) GetRecord();
					return record.StawkaCWU;
				}
				set {
					NieruchomoscSchema.StawkaCWUBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaCWU = value;
					NieruchomoscSchema.StawkaCWUAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaSmieciSel {
				get {
					if (record==null) GetRecord();
					return record.StawkaSmieciSel;
				}
				set {
					NieruchomoscSchema.StawkaSmieciSelBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaSmieciSel = value;
					NieruchomoscSchema.StawkaSmieciSelAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaSmieciNsel {
				get {
					if (record==null) GetRecord();
					return record.StawkaSmieciNsel;
				}
				set {
					NieruchomoscSchema.StawkaSmieciNselBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaSmieciNsel = value;
					NieruchomoscSchema.StawkaSmieciNselAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaCalosc {
				get {
					if (record==null) GetRecord();
					return record.StawkaCalosc;
				}
				set {
					NieruchomoscSchema.StawkaCaloscBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaCalosc = value;
					NieruchomoscSchema.StawkaCaloscAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency StawkaFunduszRemontowy {
				get {
					if (record==null) GetRecord();
					return record.StawkaFunduszRemontowy;
				}
				set {
					NieruchomoscSchema.StawkaFunduszRemontowyBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.StawkaFunduszRemontowy = value;
					NieruchomoscSchema.StawkaFunduszRemontowyAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public Currency SumaStawekBezFR {
				get {
					if (record==null) GetRecord();
					return record.SumaStawekBezFR;
				}
				set {
					NieruchomoscSchema.SumaStawekBezFRBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					GetEdit(record==null, false);
					record.SumaStawekBezFR = value;
					NieruchomoscSchema.SumaStawekBezFRAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			[MaxLength(50)]
			public string KontoFundusz {
				get {
					if (record==null) GetRecord();
					return record.KontoFundusz;
				}
				set {
					NieruchomoscSchema.KontoFunduszBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoFunduszLength) throw new ValueToLongException(this, "KontoFundusz", KontoFunduszLength);
					GetEdit(record==null, false);
					record.KontoFundusz = value;
					NieruchomoscSchema.KontoFunduszAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int KontoFunduszLength = 50;

			[MaxLength(50)]
			public string KontoZaliczki {
				get {
					if (record==null) GetRecord();
					return record.KontoZaliczki;
				}
				set {
					NieruchomoscSchema.KontoZaliczkiBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					if (value!=null) value = value.TrimEnd();
					if (value.Length>KontoZaliczkiLength) throw new ValueToLongException(this, "KontoZaliczki", KontoZaliczkiLength);
					GetEdit(record==null, false);
					record.KontoZaliczki = value;
					NieruchomoscSchema.KontoZaliczkiAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			public const int KontoZaliczkiLength = 50;

			public Rozliczenie Rozliczenie {
				get {
					if (record==null) GetRecord();
					return (Rozliczenie)GetRowReference(ref record.Rozliczenie);
				}
				set {
					NieruchomoscSchema.RozliczenieBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					record.Rozliczenie = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoNieruchomoscRozliczenie);
					}
					NieruchomoscSchema.RozliczenieAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			[Required]
			public Zarzadca Zarzadca {
				get {
					if (record==null) GetRecord();
					return (Zarzadca)GetRowReference(ref record.Zarzadca);
				}
				set {
					NieruchomoscSchema.ZarzadcaBeforeEdit?.Invoke((Nieruchomosc)this, ref value);
					System.Diagnostics.Debug.Assert(value==null || State==RowState.Detached || value.State==RowState.Detached || Session==value.Session);
					GetEdit(record==null, false);
					if (value==null) throw new RequiredException(this, "Zarzadca");
					record.Zarzadca = value;
					if (State!=RowState.Detached) {
						ResyncSet(keyInfoNieruchomoscZarzadca);
					}
					NieruchomoscSchema.ZarzadcaAfterEdit?.Invoke((Nieruchomosc)this);
				}
			}

			[Browsable(false)]
			public new Nieruchomosci Table => (Nieruchomosci)base.Table;

			[Browsable(false)]
			public CzynszeModule Module => Table.Module;

			protected override Soneta.Business.App.TableInfo TableInfo => tableInfoNieruchomosci;

			public sealed override AccessRights GetObjectRight() {
				AccessRights ar = CalcObjectRight();
				NieruchomoscSchema.OnCalcObjectRight?.Invoke((Nieruchomosc)this, ref ar);
				return ar;
			}

			protected sealed override AccessRights GetParentsObjectRight() {
				AccessRights result = CalcParentsObjectRight();
				NieruchomoscSchema.OnCalcParentsObjectRight?.Invoke((Nieruchomosc)this, ref result);
				return result;
			}

			protected override bool CalcReadOnly() {
				bool result = false;
				NieruchomoscSchema.OnCalcReadOnly?.Invoke((Nieruchomosc)this, ref result);
				return result;
			}

			class ZarzadcaRequiredVerifier : RequiredVerifier {
				internal ZarzadcaRequiredVerifier(IRow row) : base(row, "Zarzadca") {
				}
				protected override bool IsValid() => ((NieruchomoscRow)Row).Zarzadca!=null;
			}

			protected override void OnAdded() {
				base.OnAdded();
				System.Diagnostics.Debug.Assert(record.Rozliczenie==null || record.Rozliczenie.State==RowState.Detached || Session==record.Rozliczenie.Session);
				Session.Verifiers.Add(new ZarzadcaRequiredVerifier(this));
				System.Diagnostics.Debug.Assert(record.Zarzadca==null || record.Zarzadca.State==RowState.Detached || Session==record.Zarzadca.Session);
				NieruchomoscSchema.OnAdded?.Invoke((Nieruchomosc)this);
			}

			protected override void OnLoaded() {
				base.OnLoaded();
				NieruchomoscSchema.OnLoaded?.Invoke((Nieruchomosc)this);
			}

			protected override void OnEditing() {
				base.OnEditing();
				NieruchomoscSchema.OnEditing?.Invoke((Nieruchomosc)this);
			}

			protected override void OnDeleting() {
				base.OnDeleting();
				NieruchomoscSchema.OnDeleting?.Invoke((Nieruchomosc)this);
			}

			protected override void OnDeleted() {
				base.OnDeleted();
				NieruchomoscSchema.OnDeleted?.Invoke((Nieruchomosc)this);
			}

			protected override void OnRepacked() {
				base.OnRepacked();
				NieruchomoscSchema.OnRepacked?.Invoke((Nieruchomosc)this);
			}

		}

		public sealed class NieruchomoscRecord : GuidedRecord {
			[MaxLength(150)]
			public string AdresPelnyNieruchomosci = "";
			public bool Nieaktywny;
			[MaxLength(150)]
			public string KodLokalu = "";
			[MaxLength(150)]
			public string KodPocztowy = "";
			[MaxLength(80)]
			public string ImieNajemcy = "";
			[MaxLength(80)]
			public string NazwiskoNajemcy = "";
			[MaxLength(200)]
			public string OpisDodatkowy = "";
			[MaxLength(80)]
			public string UlicaNajemcy = "";
			[MaxLength(5)]
			public string NumerBramyNajemcy = "";
			[MaxLength(5)]
			public string NumerMieszkaniaNajemcy = "";
			[MaxLength(6)]
			public string KodPocztowyNajemcy = "";
			[MaxLength(50)]
			public string Miasto = "";
			[MaxLength(50)]
			public string MiastoNajemcy = "";
			public Currency StawkaWoda;
			public Currency StawkaScieki;
			public Currency StawkaCo;
			public Currency StawkaSmieci;
			public Currency StawkaKEkspl;
			public Currency StawkaWynZarz;
			public Currency StawkaDomofon;
			public Currency StawkaEnergia;
			public Currency StawkaWinda;
			public Currency StawkaAntena;
			public Currency StawkaCWU;
			public Currency StawkaSmieciSel;
			public Currency StawkaSmieciNsel;
			public Currency StawkaCalosc;
			public Currency StawkaFunduszRemontowy;
			public Currency SumaStawekBezFR;
			[MaxLength(50)]
			public string KontoFundusz = "";
			[MaxLength(50)]
			public string KontoZaliczki = "";
			[ParentTable("Rozliczenie")]
			public IRow Rozliczenie;
			[Required]
			[ParentTable("Zarzadca")]
			public IRow Zarzadca;

			public override Record Clone() {
				NieruchomoscRecord rec = (NieruchomoscRecord)MemberwiseClone();
				return rec;
			}

			public override void Load(RecordReader creator) {
				Guid = creator.Read_guid();
				AdresPelnyNieruchomosci = creator.Read_string();
				Nieaktywny = creator.Read_boolean();
				KodLokalu = creator.Read_string();
				KodPocztowy = creator.Read_string();
				ImieNajemcy = creator.Read_string();
				NazwiskoNajemcy = creator.Read_string();
				OpisDodatkowy = creator.Read_string();
				UlicaNajemcy = creator.Read_string();
				NumerBramyNajemcy = creator.Read_string();
				NumerMieszkaniaNajemcy = creator.Read_string();
				KodPocztowyNajemcy = creator.Read_string();
				Miasto = creator.Read_string();
				MiastoNajemcy = creator.Read_string();
				StawkaWoda = creator.Read_currency();
				StawkaScieki = creator.Read_currency();
				StawkaCo = creator.Read_currency();
				StawkaSmieci = creator.Read_currency();
				StawkaKEkspl = creator.Read_currency();
				StawkaWynZarz = creator.Read_currency();
				StawkaDomofon = creator.Read_currency();
				StawkaEnergia = creator.Read_currency();
				StawkaWinda = creator.Read_currency();
				StawkaAntena = creator.Read_currency();
				StawkaCWU = creator.Read_currency();
				StawkaSmieciSel = creator.Read_currency();
				StawkaSmieciNsel = creator.Read_currency();
				StawkaCalosc = creator.Read_currency();
				StawkaFunduszRemontowy = creator.Read_currency();
				SumaStawekBezFR = creator.Read_currency();
				KontoFundusz = creator.Read_string();
				KontoZaliczki = creator.Read_string();
				Rozliczenie = creator.Read_Row(tableInfoRozliczenia);
				Zarzadca = creator.Read_Row(tableInfoZarzadcy);
			}
		}

		public static class NieruchomoscSchema {

			internal static RowDelegate<NieruchomoscRow, string> AdresPelnyNieruchomosciBeforeEdit;
			public static void AddAdresPelnyNieruchomosciBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> AdresPelnyNieruchomosciBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(AdresPelnyNieruchomosciBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> AdresPelnyNieruchomosciAfterEdit;
			public static void AddAdresPelnyNieruchomosciAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> AdresPelnyNieruchomosciAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(AdresPelnyNieruchomosciAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, bool> NieaktywnyBeforeEdit;
			public static void AddNieaktywnyBeforeEdit(RowDelegate<NieruchomoscRow, bool> value)
				=> NieaktywnyBeforeEdit = (RowDelegate<NieruchomoscRow, bool>)Delegate.Combine(NieaktywnyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> NieaktywnyAfterEdit;
			public static void AddNieaktywnyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> NieaktywnyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(NieaktywnyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> KodLokaluBeforeEdit;
			public static void AddKodLokaluBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> KodLokaluBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(KodLokaluBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> KodLokaluAfterEdit;
			public static void AddKodLokaluAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> KodLokaluAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(KodLokaluAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> KodPocztowyBeforeEdit;
			public static void AddKodPocztowyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> KodPocztowyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(KodPocztowyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> KodPocztowyAfterEdit;
			public static void AddKodPocztowyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> KodPocztowyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(KodPocztowyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> ImieNajemcyBeforeEdit;
			public static void AddImieNajemcyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> ImieNajemcyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(ImieNajemcyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> ImieNajemcyAfterEdit;
			public static void AddImieNajemcyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> ImieNajemcyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(ImieNajemcyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> NazwiskoNajemcyBeforeEdit;
			public static void AddNazwiskoNajemcyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> NazwiskoNajemcyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(NazwiskoNajemcyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> NazwiskoNajemcyAfterEdit;
			public static void AddNazwiskoNajemcyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> NazwiskoNajemcyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(NazwiskoNajemcyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> OpisDodatkowyBeforeEdit;
			public static void AddOpisDodatkowyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> OpisDodatkowyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(OpisDodatkowyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> OpisDodatkowyAfterEdit;
			public static void AddOpisDodatkowyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> OpisDodatkowyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(OpisDodatkowyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> UlicaNajemcyBeforeEdit;
			public static void AddUlicaNajemcyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> UlicaNajemcyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(UlicaNajemcyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> UlicaNajemcyAfterEdit;
			public static void AddUlicaNajemcyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> UlicaNajemcyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(UlicaNajemcyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> NumerBramyNajemcyBeforeEdit;
			public static void AddNumerBramyNajemcyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> NumerBramyNajemcyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(NumerBramyNajemcyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> NumerBramyNajemcyAfterEdit;
			public static void AddNumerBramyNajemcyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> NumerBramyNajemcyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(NumerBramyNajemcyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> NumerMieszkaniaNajemcyBeforeEdit;
			public static void AddNumerMieszkaniaNajemcyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> NumerMieszkaniaNajemcyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(NumerMieszkaniaNajemcyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> NumerMieszkaniaNajemcyAfterEdit;
			public static void AddNumerMieszkaniaNajemcyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> NumerMieszkaniaNajemcyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(NumerMieszkaniaNajemcyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> KodPocztowyNajemcyBeforeEdit;
			public static void AddKodPocztowyNajemcyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> KodPocztowyNajemcyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(KodPocztowyNajemcyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> KodPocztowyNajemcyAfterEdit;
			public static void AddKodPocztowyNajemcyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> KodPocztowyNajemcyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(KodPocztowyNajemcyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> MiastoBeforeEdit;
			public static void AddMiastoBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> MiastoBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(MiastoBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> MiastoAfterEdit;
			public static void AddMiastoAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> MiastoAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(MiastoAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> MiastoNajemcyBeforeEdit;
			public static void AddMiastoNajemcyBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> MiastoNajemcyBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(MiastoNajemcyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> MiastoNajemcyAfterEdit;
			public static void AddMiastoNajemcyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> MiastoNajemcyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(MiastoNajemcyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaWodaBeforeEdit;
			public static void AddStawkaWodaBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaWodaBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaWodaBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaWodaAfterEdit;
			public static void AddStawkaWodaAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaWodaAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaWodaAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaSciekiBeforeEdit;
			public static void AddStawkaSciekiBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaSciekiBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaSciekiBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaSciekiAfterEdit;
			public static void AddStawkaSciekiAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaSciekiAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaSciekiAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaCoBeforeEdit;
			public static void AddStawkaCoBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaCoBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaCoBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaCoAfterEdit;
			public static void AddStawkaCoAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaCoAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaCoAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaSmieciBeforeEdit;
			public static void AddStawkaSmieciBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaSmieciBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaSmieciBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaSmieciAfterEdit;
			public static void AddStawkaSmieciAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaSmieciAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaSmieciAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaKEksplBeforeEdit;
			public static void AddStawkaKEksplBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaKEksplBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaKEksplBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaKEksplAfterEdit;
			public static void AddStawkaKEksplAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaKEksplAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaKEksplAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaWynZarzBeforeEdit;
			public static void AddStawkaWynZarzBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaWynZarzBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaWynZarzBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaWynZarzAfterEdit;
			public static void AddStawkaWynZarzAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaWynZarzAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaWynZarzAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaDomofonBeforeEdit;
			public static void AddStawkaDomofonBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaDomofonBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaDomofonBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaDomofonAfterEdit;
			public static void AddStawkaDomofonAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaDomofonAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaDomofonAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaEnergiaBeforeEdit;
			public static void AddStawkaEnergiaBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaEnergiaBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaEnergiaBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaEnergiaAfterEdit;
			public static void AddStawkaEnergiaAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaEnergiaAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaEnergiaAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaWindaBeforeEdit;
			public static void AddStawkaWindaBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaWindaBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaWindaBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaWindaAfterEdit;
			public static void AddStawkaWindaAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaWindaAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaWindaAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaAntenaBeforeEdit;
			public static void AddStawkaAntenaBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaAntenaBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaAntenaBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaAntenaAfterEdit;
			public static void AddStawkaAntenaAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaAntenaAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaAntenaAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaCWUBeforeEdit;
			public static void AddStawkaCWUBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaCWUBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaCWUBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaCWUAfterEdit;
			public static void AddStawkaCWUAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaCWUAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaCWUAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaSmieciSelBeforeEdit;
			public static void AddStawkaSmieciSelBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaSmieciSelBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaSmieciSelBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaSmieciSelAfterEdit;
			public static void AddStawkaSmieciSelAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaSmieciSelAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaSmieciSelAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaSmieciNselBeforeEdit;
			public static void AddStawkaSmieciNselBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaSmieciNselBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaSmieciNselBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaSmieciNselAfterEdit;
			public static void AddStawkaSmieciNselAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaSmieciNselAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaSmieciNselAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaCaloscBeforeEdit;
			public static void AddStawkaCaloscBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaCaloscBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaCaloscBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaCaloscAfterEdit;
			public static void AddStawkaCaloscAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaCaloscAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaCaloscAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> StawkaFunduszRemontowyBeforeEdit;
			public static void AddStawkaFunduszRemontowyBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> StawkaFunduszRemontowyBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(StawkaFunduszRemontowyBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> StawkaFunduszRemontowyAfterEdit;
			public static void AddStawkaFunduszRemontowyAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> StawkaFunduszRemontowyAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(StawkaFunduszRemontowyAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Currency> SumaStawekBezFRBeforeEdit;
			public static void AddSumaStawekBezFRBeforeEdit(RowDelegate<NieruchomoscRow, Currency> value)
				=> SumaStawekBezFRBeforeEdit = (RowDelegate<NieruchomoscRow, Currency>)Delegate.Combine(SumaStawekBezFRBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> SumaStawekBezFRAfterEdit;
			public static void AddSumaStawekBezFRAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> SumaStawekBezFRAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(SumaStawekBezFRAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> KontoFunduszBeforeEdit;
			public static void AddKontoFunduszBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> KontoFunduszBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(KontoFunduszBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> KontoFunduszAfterEdit;
			public static void AddKontoFunduszAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> KontoFunduszAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(KontoFunduszAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, string> KontoZaliczkiBeforeEdit;
			public static void AddKontoZaliczkiBeforeEdit(RowDelegate<NieruchomoscRow, string> value)
				=> KontoZaliczkiBeforeEdit = (RowDelegate<NieruchomoscRow, string>)Delegate.Combine(KontoZaliczkiBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> KontoZaliczkiAfterEdit;
			public static void AddKontoZaliczkiAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> KontoZaliczkiAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(KontoZaliczkiAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Rozliczenie> RozliczenieBeforeEdit;
			public static void AddRozliczenieBeforeEdit(RowDelegate<NieruchomoscRow, Rozliczenie> value)
				=> RozliczenieBeforeEdit = (RowDelegate<NieruchomoscRow, Rozliczenie>)Delegate.Combine(RozliczenieBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> RozliczenieAfterEdit;
			public static void AddRozliczenieAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> RozliczenieAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(RozliczenieAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow, Zarzadca> ZarzadcaBeforeEdit;
			public static void AddZarzadcaBeforeEdit(RowDelegate<NieruchomoscRow, Zarzadca> value)
				=> ZarzadcaBeforeEdit = (RowDelegate<NieruchomoscRow, Zarzadca>)Delegate.Combine(ZarzadcaBeforeEdit, value);

			internal static RowDelegate<NieruchomoscRow> ZarzadcaAfterEdit;
			public static void AddZarzadcaAfterEdit(RowDelegate<NieruchomoscRow> value)
				=> ZarzadcaAfterEdit = (RowDelegate<NieruchomoscRow>)Delegate.Combine(ZarzadcaAfterEdit, value);

			internal static RowDelegate<NieruchomoscRow> OnLoaded;
			public static void AddOnLoaded(RowDelegate<NieruchomoscRow> value)
				=> OnLoaded = (RowDelegate<NieruchomoscRow>)Delegate.Combine(OnLoaded, value);

			internal static RowDelegate<NieruchomoscRow> OnAdded;
			public static void AddOnAdded(RowDelegate<NieruchomoscRow> value)
				=> OnAdded = (RowDelegate<NieruchomoscRow>)Delegate.Combine(OnAdded, value);

			internal static RowDelegate<NieruchomoscRow> OnEditing;
			public static void AddOnEditing(RowDelegate<NieruchomoscRow> value)
				=> OnEditing = (RowDelegate<NieruchomoscRow>)Delegate.Combine(OnEditing, value);

			internal static RowDelegate<NieruchomoscRow> OnDeleting;
			public static void AddOnDeleting(RowDelegate<NieruchomoscRow> value)
				=> OnDeleting = (RowDelegate<NieruchomoscRow>)Delegate.Combine(OnDeleting, value);

			internal static RowDelegate<NieruchomoscRow> OnDeleted;
			public static void AddOnDeleted(RowDelegate<NieruchomoscRow> value)
				=> OnDeleted = (RowDelegate<NieruchomoscRow>)Delegate.Combine(OnDeleted, value);

			internal static RowDelegate<NieruchomoscRow> OnRepacked;
			public static void AddOnRepacked(RowDelegate<NieruchomoscRow> value)
				=> OnRepacked = (RowDelegate<NieruchomoscRow>)Delegate.Combine(OnRepacked, value);

			internal static RowAccessRightsDelegate<NieruchomoscRow> OnCalcObjectRight;
			public static void AddOnCalcObjectRight(RowAccessRightsDelegate<NieruchomoscRow> value)
				=> OnCalcObjectRight = (RowAccessRightsDelegate<NieruchomoscRow>)Delegate.Combine(OnCalcObjectRight, value);

			internal static RowAccessRightsDelegate<NieruchomoscRow> OnCalcParentsObjectRight;
			public static void AddOnCalcParentsObjectRight(RowAccessRightsDelegate<NieruchomoscRow> value)
				=> OnCalcParentsObjectRight = (RowAccessRightsDelegate<NieruchomoscRow>)Delegate.Combine(OnCalcParentsObjectRight, value);

			internal static RowReadOnlyDelegate<NieruchomoscRow> OnCalcReadOnly;
			public static void AddOnCalcReadOnly(RowReadOnlyDelegate<NieruchomoscRow> value)
				=> OnCalcReadOnly = (RowReadOnlyDelegate<NieruchomoscRow>)Delegate.Combine(OnCalcReadOnly, value);

		}

	}

	[System.CodeDom.Compiler.GeneratedCode("Soneta.Generator", "4")]
	public static class StaticsCzynszeModule {
		public static CzynszeModule GetCzynsze(this Session session) => CzynszeModule.GetInstance(session);
	}

}

